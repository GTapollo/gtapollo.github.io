<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Harttle Land</title>
		<description>欢迎访问 Harttle 的个人主页，这里记录了 harttle 关于计算机技术的文章、个人信息与相册，以及有用的资源分享和下载。</description>
		<link>http://harttle.github.io</link>
		<atom:link href="http://harttle.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Computer Organization and Design</title>
				<description>&lt;h1&gt;Computer Abstractions and Technology&lt;/h1&gt;

&lt;h2&gt;Concepts&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Moore&amp;#39;s law&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Over the history of computing hardware, the number of transistors on integrated circuits doubles approximately every two years.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Compiler&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A program that translates high-level language statements into assembly language statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Assembler&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A program that translates a symbolic version of instructions into the binary version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;High-level programming langrage&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A portable language that is composed of words and algebraic notation that can be translated by a compiler into assembly language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Assembly language&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Asymbolic representation of machine instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Machine language&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A binary representation of machine instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5 components of a computer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Datapath&lt;/li&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The last two sometimes combined and called the processor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Instruction set architecture&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One key interface between the levels of abstraction is the instruction set architecture-the interface between the hardware and low-level software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Performance&lt;/h2&gt;

&lt;h3&gt;Measurement and Limitation&lt;/h3&gt;

&lt;p&gt;$$
\begin{eqnarray}
CPU~time &amp;amp;=&amp;amp; Instruction~count \times CPI \times Clock~cycle~time\\
        &amp;amp;=&amp;amp; \frac{Instruction~count \times CPI}{Clock~rate}
\end{eqnarray}
$$&lt;/p&gt;

&lt;p&gt;$$
Power = Capacitive~load \times Voltage^2 \times Frequency~switched
$$&lt;/p&gt;

&lt;h3&gt;Fallacies and Pitfalls&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pitfall&lt;/strong&gt;: Expecting the improvement of one aspect of a computer to increse overall performance by an amount proportional to the size of the improvement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Amdahl&amp;#39;s law&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$$
Execution~time~after~improvement = \\
\frac{Execution~time~affected~by~improvement}{Amount~of~improvement} + Execution~time~unaffected
$$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pitfall&lt;/strong&gt;: Using a subset of the performance equation as a performance metric.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;$$
\begin{eqnarray}
MIPS &amp;amp;=&amp;amp; \frac{Instruction~count}{Execution~time \times 10^6} \\
    &amp;amp;=&amp;amp; \frac{Clock~rate}{CPI \times 10^6}
\end{eqnarray}
$$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Instruction per program is not considered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Execution time is the only valid and unimpeachable measure of performance.&lt;/p&gt;

&lt;h1&gt;Instructions: Language of the Computer&lt;/h1&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
</description>
				<pubDate>Mon, 11 Nov 2013 23:43:16 +0800</pubDate>
				<link>http://harttle.github.io/%E7%AC%94%E8%AE%B0/computer-organization-and-design.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E7%AC%94%E8%AE%B0/computer-organization-and-design.html</guid>
			</item>
		
			<item>
				<title>Vim 使用</title>
				<description>&lt;p&gt;Vim是从vi发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。&lt;/p&gt;

&lt;p&gt;文档参见：&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/&quot;&gt;http://vimdoc.sourceforge.net/htmldoc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;中文文档：&lt;a href=&quot;http://vimcdoc.sourceforge.net/doc/&quot;&gt;http://vimcdoc.sourceforge.net/doc/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;基础使用&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/vim-key.png&quot; alt=&quot;vim-key&quot;&gt;&lt;/p&gt;

&lt;p&gt;查看帮助：&lt;code&gt;:help&lt;/code&gt;，&lt;code&gt;&amp;lt;Ctrl&amp;gt;]&lt;/code&gt; 进入标签，&lt;code&gt;&amp;lt;Ctrl&amp;gt;O&lt;/code&gt; 返回。&lt;/p&gt;

&lt;h1&gt;配置文件&lt;/h1&gt;

&lt;h2&gt;初始化过程&lt;/h2&gt;

&lt;p&gt;正如多数 linux 软件，vim 的配置文件分为系统配置文件 &lt;code&gt;/etc/vimrc&lt;/code&gt;，&lt;code&gt;/usr/share/vim/&lt;/code&gt; 和用户配置文件 &lt;code&gt;~/.vimrc&lt;/code&gt;，&lt;code&gt;~/.vim/&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;vim 的配置文件载入过程为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/etc/vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vim/&lt;/code&gt;，&lt;code&gt;$HOME/.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$VIMRUNTIME/.vim&lt;/code&gt;，&lt;code&gt;$VIMRUNTIME/.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vim/after/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;通过运行 &lt;code&gt;vim -V&lt;/code&gt; 可查看整个初始化过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;示例配置&lt;/h2&gt;

&lt;p&gt;一个示例配置文件如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; .vimrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; See: http://vimdoc.sourceforge.net/htmldoc/options.html for details&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; For multi-byte character support (CJK support, for example):&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,gb18030,latin1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;&amp;quot; Number of spaces that a &amp;lt;Tab&amp;gt; in the file counts for.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;quot; Number of spaces to use for each step of (auto)indent.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expandtab&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;&amp;quot; Use the appropriate number of spaces to insert a &amp;lt;Tab&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; Spaces are used in indents with the &amp;#39;&amp;gt;&amp;#39; and &amp;#39;&amp;lt;&amp;#39; commands&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; and when &amp;#39;autoindent&amp;#39; is on. To insert a real tab when&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; &amp;#39;expandtab&amp;#39; is on, use CTRL-V &amp;lt;Tab&amp;gt;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;smarttab&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;&amp;quot; When on, a &amp;lt;Tab&amp;gt; in front of a line inserts blanks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; according to &amp;#39;shiftwidth&amp;#39;. &amp;#39;tabstop&amp;#39; is used in other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; places. A &amp;lt;BS&amp;gt; will delete a &amp;#39;shiftwidth&amp;#39; worth of space&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; at the start of the line.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;showcmd&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;&amp;quot; Show (partial) command in status line.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;number&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;&amp;quot; Show line numbers.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;showmatch&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;&amp;quot; When a bracket is inserted, briefly jump to the matching&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; one. The jump is only done if the match can be seen on the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; screen. The time to show the match can be set with&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; &amp;#39;matchtime&amp;#39;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hlsearch&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;&amp;quot; When there is a previous search pattern, highlight all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; its matches.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;incsearch&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;&amp;quot; While typing a search command, show immediately where the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; so far typed pattern matches.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ignorecase&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;&amp;quot; Ignore case in search patterns.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;smartcase&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;&amp;quot; Override the &amp;#39;ignorecase&amp;#39; option if the search pattern&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; contains upper case characters.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;&amp;quot; Influences the working of &amp;lt;BS&amp;gt;, &amp;lt;Del&amp;gt;, CTRL-W&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; and CTRL-U in Insert mode. This is a list of items,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; separated by commas. Each item allows a way to backspace&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; over something.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;autoindent&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;&amp;quot; Copy indent from current line when starting a new line&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; (typing &amp;lt;CR&amp;gt; in Insert mode or when using the &amp;quot;o&amp;quot; or &amp;quot;O&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; command).&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;textwidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;79&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;&amp;quot; Maximum width of text that is being inserted. A longer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; line will be broken after white space to get this width.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;formatoptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;quot; This is a sequence of letters which describes how&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; automatic formatting is to be done.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; letter    meaning when present in &amp;#39;formatoptions&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; ------    ---------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; c         Auto-wrap comments using textwidth, inserting&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot;           the current comment leader automatically.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; q         Allow formatting of comments with &amp;quot;gq&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; r         Automatically insert the current comment leader&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot;           after hitting &amp;lt;Enter&amp;gt; in Insert mode. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; t         Auto-wrap text using textwidth (does not apply&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot;           to comments)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ruler&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;&amp;quot; Show the line and column number of the cursor position,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; separated by a comma.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dark&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; When set to &amp;quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dark&lt;/span&gt;&amp;quot;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; Vim will &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; use &lt;span class=&quot;k&quot;&gt;colors&lt;/span&gt; that look
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; good on a dark background. When set to &amp;quot;light&amp;quot;, Vim will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; try to use colors that look good on a light background.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;                    &amp;quot; Any other value is illegal.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;&amp;quot; Enable the use of the mouse.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;进阶技巧&lt;/h1&gt;

&lt;h2&gt;块编辑&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可视&lt;/strong&gt; 模式：&lt;code&gt;v&lt;/code&gt; 可进入visual模式，使用标准快捷键移动光标可选择文本块，之后可输入标准编辑命令。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;列编辑&lt;/strong&gt; 模式：&lt;code&gt;&amp;lt;Ctrl&amp;gt;v&lt;/code&gt; 进入列编辑模式，移动光标将按列进行选中。例如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;删除块注释：&lt;code&gt;&amp;lt;Ctrl&amp;gt;v&lt;/code&gt; 进入列编辑模式，&lt;code&gt;ikjl&lt;/code&gt; 选中注释列，&lt;code&gt;&amp;lt;N&amp;gt;x&lt;/code&gt; 删除N个字符；&lt;/p&gt;

&lt;p&gt;添加块注释：&lt;code&gt;&amp;lt;Ctrl&amp;gt;v&lt;/code&gt; 进入列编辑模式，&lt;code&gt;ikjl&lt;/code&gt; 选中要注释的行，&lt;code&gt;I&lt;/code&gt; 进入插入模式，输入几个注释字符，&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 推出列编辑。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;文件识别&lt;/h2&gt;

&lt;p&gt;Vim可针对特定的文件，加载指定插件。以此来实现文件类型的特殊配置以及语法高亮。&lt;/p&gt;

&lt;p&gt;参见：&lt;a href=&quot;http://vimcdoc.sourceforge.net/doc/filetype.html#filetype-plugins&quot;&gt;http://vimcdoc.sourceforge.net/doc/filetype.html#filetype-plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filetype on&lt;/code&gt; 将开启文件识别，Vim 会在载入时做如下工作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行&lt;code&gt;$RUNTIMEPATH/filetype.vim&lt;/code&gt;，根据文件名判断类型&lt;/li&gt;
&lt;li&gt;如果需要的话，执行 &lt;code&gt;$RUNTIMEPATH/scripts.vim&lt;/code&gt;，进一步判断文件类型&lt;/li&gt;
&lt;li&gt;设置 Vim 的 &lt;code&gt;filetype&lt;/code&gt; 变量&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;我们也可以通过诸如 &lt;code&gt;:set filetype=c&lt;/code&gt; 的命令来手动设置文件类型
如果不使用文件识别，我们可以运行 &lt;code&gt;au BufNewFile,BufRead *.plt  source ~/.vim/after/ftplugin/plt.vim&lt;/code&gt; 来使用 &lt;code&gt;plt.vim&lt;/code&gt; 初始化 &lt;code&gt;*.plt&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;更多关于&lt;code&gt;RUNTIMEPATH&lt;/code&gt; ：&lt;a href=&quot;http://vimcdoc.sourceforge.net/doc/options.html#&amp;#x27;runtimepath&quot;&gt;http://vimcdoc.sourceforge.net/doc/options.html#&amp;#39;runtimepath&lt;/a&gt;&amp;#39;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;插件加载&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;filetype plugin on&lt;/code&gt; 允许Vim加载文件类型的插件，Vim会在载入时寻找并加载 &lt;code&gt;$RUNTIMEPATH/ftplugin.vim&lt;/code&gt;，该脚本会寻找并加载 &lt;code&gt;$RUNTIMEPATH/ftplugin/&amp;lt;filetype&amp;gt;.vim&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如：&lt;code&gt;~/.vim/ftplugin/cpp.vim&lt;/code&gt; 将在 cpp 文件类型被识别后自动载入。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;同样，&lt;code&gt;~/.vim/after/ftplugin/cpp.vim&lt;/code&gt; 会在最后被调用，进而覆盖之前的配置。
另外，&lt;code&gt;filetype indent on&lt;/code&gt; 允许Vim加载该文件类型的缩进设置。即执行&lt;code&gt;RUNTIMEPATH/indent.vim&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;语法高亮&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;syntax on&lt;/code&gt; 允许 Vim 加载文件类型的语法高亮配置，Vim会在载入时寻找并加载 &lt;code&gt;RUNTIMEPATH/syntax/&amp;lt;filetype&amp;gt;.vim&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如：&lt;code&gt;~/.vim/syntax/markdown.vim&lt;/code&gt; 将会对文件类型&lt;code&gt;markdown&lt;/code&gt; 进行语法高亮。&lt;/p&gt;

&lt;h2&gt;键盘映射&lt;/h2&gt;

&lt;p&gt;Vim支持定义键盘映射来完成快捷键的功能，也就是将特定的按键映射为一系列按键与函数的序列。&lt;/p&gt;

&lt;p&gt;例如将 &lt;code&gt;F7&lt;/code&gt; 映射为编译当前java文件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim language-vim&quot; data-lang=&quot;vim&quot;&gt;map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F7&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;javac %&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:&lt;/code&gt; 为进入Ex模式，&lt;code&gt;!&lt;/code&gt; 指定下面的命令在vim外执行，&lt;code&gt;%&lt;/code&gt; 为当前文件名，&lt;code&gt;%&amp;lt;&lt;/code&gt; 为不带扩展名的当前文件名，&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; 为回车。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;函数&lt;/h2&gt;

&lt;p&gt;现在我们可以自定义快捷键了，如果希望在键盘映射中执行更复杂的功能，我们需要定义Vim函数。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;函数名必须以大写字母开始&lt;/li&gt;
&lt;li&gt;函数可以有返回值：&lt;code&gt;return something&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数可以有范围前缀。定义：&lt;code&gt;function s:Save()&lt;/code&gt;，调用：&lt;code&gt;call s:Save()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是函数调用的例子，按键F8时，进入拷贝模式（取消行号，鼠标进入visual模式）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; key mapping&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F8&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; ToggleCopy&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; global variable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:copymode&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ToggleCopy&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:copymode
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nonumber&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:copymode&lt;span class=&quot;p&quot;&gt;=!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:copymode
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Fri, 08 Nov 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/linux/vim-advanced.html</link>
				<guid isPermaLink="true">http://harttle.github.io/linux/vim-advanced.html</guid>
			</item>
		
			<item>
				<title>Modern Operating Systems</title>
				<description></description>
				<pubDate>Thu, 07 Nov 2013 21:50:38 +0800</pubDate>
				<link>http://harttle.github.io/%E7%AC%94%E8%AE%B0/modern-os.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E7%AC%94%E8%AE%B0/modern-os.html</guid>
			</item>
		
			<item>
				<title>安装 Arch Linux</title>
				<description>&lt;p&gt;本文介绍如何安装 Arch Linux，一个轻量级、简单的 Linux 发行版。&lt;/p&gt;

&lt;p&gt;相关链接&lt;br&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Beginners&amp;#x27;_Guide&quot;&gt;Beginner&amp;#39;s Guide&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Arch_Linux_Localization_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87&quot;&gt;汉化&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;制作镜像并启动&lt;/h2&gt;

&lt;p&gt;在arch官方或者bjtu下载到镜像（X86和64）是同一镜像。然后刻录安装盘：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux:   &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/iso &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sdc  &lt;span class=&quot;c&quot;&gt;# 确认 sdc 为你的U盘&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;windows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下载 dd4dos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd if=/path/to/iso of=&amp;quot;\\.\G:&amp;quot;   # 确认G盘为你的U盘&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;另外，启动不了很正常，和U盘有关。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;连接网络&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;无线网络
&lt;code&gt;bash
netcfg(wifi-menu连接无线网）
cd /etc/network.d
cp ./examples/wireless_XXX ./    
vi wireless_XXX  #修改参数
netcfg wireless_XXX
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于内核没有支持的无线网卡，安装ndiswrapper使用windows驱动&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;安装    &lt;code&gt;pacman -S ndiswrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加载    &lt;code&gt;ndiswrapper -i winXP_driver.inf(可以从windows目录下或驱动安装包找到)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;确认    &lt;code&gt;ndiswrapper -l&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;载入模块    &lt;code&gt;modprobe ndiswrapper&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;若无线网卡的状态指示灯不亮，重新载入网卡    &lt;code&gt;cardctl eject &amp;amp;&amp;amp; cardctl insert&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;iwconfig&lt;/code&gt; 可查看网络设备(wlan0,eth0等)，若没有识别请参照wiki&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;准备硬盘&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;磁盘分区：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;cfdisk /dev/sda &lt;span class=&quot;c&quot;&gt;#至少一个主分区。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;格式化：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;mkfs.ext4 /dev/sda1，mkswap /dev/sda2（之后可用 lsblk /dev/sda 查看分区）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;挂载：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;mount /dev/sda1 /mnt，swapon /dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc/pacmand./mirrorlist    &lt;span class=&quot;c&quot;&gt;#配置源&lt;/span&gt;
pacstrap -i /mnt base base-devel    &lt;span class=&quot;c&quot;&gt;#安装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新静态文件系统信息&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;可能出现的问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GPGME error  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No data：error: failed to update core (invalid or corrupted database (PGP signature))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 的 &lt;code&gt;[options]&lt;/code&gt; 加入 &lt;code&gt;SigLevel = Never&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用交换文件&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 建立swap文件&lt;/span&gt;
fallocate -l 512M /swapfile
&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/swapfile &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512

&lt;span class=&quot;c&quot;&gt;# 设置swap&lt;/span&gt;
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile

&lt;span class=&quot;c&quot;&gt;# 更新静态文件系统信息 /etc/fstab 中加入：&lt;/span&gt;
/swapfile none swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;配置系统&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入新系统&lt;/p&gt;

&lt;p&gt;更换主目录：&lt;code&gt;arch-chroot /mnt&lt;/code&gt;
更新系统：&lt;code&gt;配置/etc/pacman.d/mirrorlist并pacman -Syu&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置区域&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置地区：&lt;code&gt;ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置硬件时钟：&lt;code&gt;hwclock --systohc --utc&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;自动同步时间：&lt;code&gt;sudo systemctl enable ntpd（需要ntp）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fix windows:&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;add a DWORD value with hexadecimal value 1 to the registry:
&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;disable time auto sync&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置语言&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置语言选项：修改 &lt;code&gt;/etc/locale.gen&lt;/code&gt; 并 &lt;code&gt;locale-gen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置语言：&lt;code&gt;echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置主机：&lt;code&gt;echo myhostname &amp;gt; /etc/hostname&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置网络&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装netcfg用到的工具包：&lt;code&gt;pacman -S wireless_tools wpa_supplicant wpa_actiond ifplugd dialog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启用自动连接

&lt;ul&gt;
&lt;li&gt;单一网络：&lt;code&gt;systemctl enable dhcpcd@eth0.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变化网络：自动连接在 &lt;code&gt;/etc/network.d&lt;/code&gt; 下的网络
&lt;code&gt;bash
systemctl enable net-auto-wired.service
systemctl enable net-auto-wired.service
systemctl enable net-auto-wireless.service
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置用户&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;设置root密码：&lt;code&gt;passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加用户：&lt;code&gt;useradd -m -g users -s /bin/bash harttle&lt;/code&gt;，设置用户密码：&lt;code&gt;passwd harttle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除用户：&lt;code&gt;userdel -r harttle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;重建引导&lt;/h2&gt;

&lt;p&gt;以grub为例，可选syslinux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装grub：&lt;code&gt;pacman -S grub-bios&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;写入主引导：&lt;code&gt;grub-install --target=i386-pc --recheck /dev/sda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置grub区域：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;cp /usr/share/locale/en&lt;span class=&quot;se&quot;&gt;\@&lt;/span&gt;quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新启动列表&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;搜索windows：&lt;code&gt;pacman -S os-prober&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新列表：&lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启：&lt;code&gt;exit;umount /mnt{boot,home,};reboot&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;安装工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AUR&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/pacman.conf 中加入&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;archlinuxfr&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SigLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Optional TrustAll
&lt;span class=&quot;nv&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; http://repo.archlinux.fr/&lt;span class=&quot;nv&quot;&gt;$arch&lt;/span&gt;
pacman -Syu yaourt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装：&lt;code&gt;pacman -S sudo&lt;/code&gt;
配置：&lt;code&gt;etc/sudoers&lt;/code&gt; 添加 &lt;code&gt;harttle ALL=(ALL) ALL&lt;/code&gt;，使harttle可以使用sudo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; 自动补全：&lt;code&gt;bash-completion&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vim&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;安装图形界面&lt;/h2&gt;

&lt;p&gt;以KDE为例，可选gnome&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装驱动：&lt;code&gt;mesa(3D)&lt;/code&gt;,&lt;code&gt;xf86-video-vesa(Default)&lt;/code&gt;,&lt;code&gt;xf86-video-nouveau(open nvidia)&lt;/code&gt;,&lt;code&gt;nouveau-dri&lt;/code&gt;(open nvidia)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装图形界面的底层协议实现：&lt;code&gt;pacman -S xorg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装kde及其语言包：&lt;code&gt;pacman -S kde kde-l10n-zh_cn&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最小安装：&lt;code&gt;kdebase&lt;/code&gt;，&lt;code&gt;phonon-gstreamer&lt;/code&gt;，&lt;code&gt;kde-l10n-zh_cn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置启动&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;采用 &lt;code&gt;startx&lt;/code&gt;：&lt;code&gt;~/.xinitrc&lt;/code&gt; 加入 &lt;code&gt;exec ck-launch-session startx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;采用kdm(kde)，可选gdm(gnome)

&lt;ul&gt;
&lt;li&gt;安装 &lt;code&gt;kdebase-workspace&lt;/code&gt;，编辑 &lt;code&gt;~/.xprofile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置 kdm 启动：&lt;code&gt;systemctl enable kdm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kde的gtk支持：安装 &lt;code&gt;oxygen-gtk2&lt;/code&gt;，&lt;code&gt;oxygen-gtk3&lt;/code&gt;，&lt;code&gt;kde-gtk-config&lt;/code&gt;(AUR) 进入系统设置-&amp;gt;公共外观行为-&amp;gt;应用程序外观-&amp;gt;gtk configuration相关设置&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kde网络管理&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pacman -S networkmanager kdeplasma-applets-networkmanagement
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;NetworkManager.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置登录屏幕主题：&lt;code&gt;archlinux-themes-kdm(AUR)&lt;/code&gt;，kde systemsettings 中的设置不起作用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在fstab加入开机挂载的分区，需要 &lt;code&gt;ntfs-3g&lt;/code&gt;(AUR)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;/dev/hda1        /mnt/winC        ntfs-3g &lt;span class=&quot;nv&quot;&gt;iocharset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf8,umask&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;022,noatime 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;汉化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置X默认字符集：在 &lt;code&gt;~/.bashrc&lt;/code&gt;、&lt;code&gt;~/.xinitrc&lt;/code&gt; 或 &lt;code&gt;~/.xprofile&lt;/code&gt; 中加入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LOCALE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zh_CN.UTF-8
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;zh_CN.UTF-8&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装字体库&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wqy-bitmapfont&lt;/code&gt;，&lt;code&gt;wqy-zenhei&lt;/code&gt;，&lt;code&gt;ttf-arphic-ukai&lt;/code&gt;，&lt;code&gt;ttf-arphic-uming&lt;/code&gt;，&lt;code&gt;ttf-fireflysung&lt;/code&gt;，&lt;code&gt;wqy-microhei&lt;/code&gt;（AUR），&lt;code&gt;wqy-microhei-lite&lt;/code&gt;（AUR）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入法&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 fcitx&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pacman -S fcitx fcitx-gtk2 fcitx-gtk3 fcitx-qt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装配置工具：&lt;code&gt;fcitx-configtool&lt;/code&gt;(基于gtk3), &lt;code&gt;fcitx-configtool-gtk2&lt;/code&gt;(基于gtk2), &lt;code&gt;kcm-fcitx&lt;/code&gt;(基于KDE的KCM)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置X的输入法：在 &lt;code&gt;~/.xinitrc&lt;/code&gt; 或 &lt;code&gt;~/.xprofile&lt;/code&gt; 中加入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;@im&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fcitx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置启动：&lt;code&gt;cp /etc/xdg/autostart/fcitx-autostart.desktop ~/.config/autostart/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;终端输入法：fbterm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S fbterm fcitx-fbterm
sudo gpasswd -a YOUR_USERNAME video &lt;span class=&quot;c&quot;&gt;#非根用户运行fbterm&lt;/span&gt;
sudo setcap &lt;span class=&quot;s1&quot;&gt;&amp;#39;cap_sys_tty_config+ep&amp;#39;&lt;/span&gt; /usr/bin/fbterm 或：sudo chmod u+s /usr/bin/fbterm &lt;span class=&quot;c&quot;&gt;#非根用户可使用键盘快捷方式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ~/.fbtermrc&lt;/span&gt;
font-names &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Consolas（Monaco）,微软雅黑
font-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15

&lt;span class=&quot;c&quot;&gt;# ~/.bashrc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TERM&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;linux&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then  &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fbterm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LANG=zh_CN.UTF-8 fbterm&amp;#39;&lt;/span&gt;  
fbterm  
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;字体&lt;/h2&gt;

&lt;p&gt;可在AUR中直接安装 Ubuntu字体、开源字体、Adobe字体，甚至 Windows 字体。&lt;/p&gt;
</description>
				<pubDate>Thu, 07 Nov 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/linux/arch-install.html</link>
				<guid isPermaLink="true">http://harttle.github.io/linux/arch-install.html</guid>
			</item>
		
			<item>
				<title>Linux 连接 Windows Server VPN</title>
				<description>&lt;p&gt;Linux 连接 Windows Server VPN，以 archLinux 为例，适用于 Ubuntu。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 pptp&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# kde in arch&lt;/span&gt;
pacman -S extra/networkmanager-pptp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建 VPN 连接&lt;/p&gt;

&lt;p&gt;网关：服务器IP或域名
登录：用户名
密码：密码
域：空
认证方式：MSCHAP MSCHAPv2
使用 MPPE 加密&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Wed, 06 Nov 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/%E6%97%A5%E5%BF%97/vpn-linux-to-windows.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E6%97%A5%E5%BF%97/vpn-linux-to-windows.html</guid>
			</item>
		
			<item>
				<title>搜索引擎搭建</title>
				<description>&lt;p&gt;采用 heritix+pagerank+lucene 方式搭建搜索引擎原型，并评估其性能。&lt;/p&gt;

&lt;h1&gt;爬虫（Heritrix）&lt;/h1&gt;

&lt;p&gt;heritrix 是用作web归档的爬虫框架，java语言实现，具有 Apache License 自由软件许可。我们采用heritrix抓取网页数据。&lt;/p&gt;

&lt;p&gt;可参照官方 Guide：&lt;a href=&quot;https://webarchive.jira.com/wiki/display/Heritrix/Heritrix+3.0+and+3.1+User+Guide&quot;&gt;https://webarchive.jira.com/wiki/display/Heritrix/Heritrix+3.0+and+3.1+User+Guide&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;依赖项&lt;/h2&gt;

&lt;p&gt;可选择 open-jdk 或者 oracle jre。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# open jdk&lt;/span&gt;
sudo apt-get install open-jdk-7 &lt;span class=&quot;c&quot;&gt;# ubuntu&lt;/span&gt;
sudo pacman -S open-jdk-7       &lt;span class=&quot;c&quot;&gt;# arch linux&lt;/span&gt;
sudo rpm -ivh open-jdk-7        &lt;span class=&quot;c&quot;&gt;# centos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;oracle jre 安装可参考 &lt;a href=&quot;http://www.liberiangeek.net/2012/04/install-oracle-java-runtime-jre-7-in-ubuntu-12-04-precise-pangolin/&quot;&gt;http://www.liberiangeek.net/2012/04/install-oracle-java-runtime-jre-7-in-ubuntu-12-04-precise-pangolin/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;安装&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载并解压&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;https://webarchive.jira.com/wiki/display/Heritrix/Heritrix&quot;&gt;https://webarchive.jira.com/wiki/display/Heritrix/Heritrix&lt;/a&gt; 可以得到最新的版本。下载后解压。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;tar -xzvf heritrix-xxx.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 在 ~/.bashrc 中加入以下环境变量&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/jre
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HERITRIX_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/heritrix
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-Xmx1024M  &lt;span class=&quot;c&quot;&gt;# 可选，指定使用的内存上限&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 UI&lt;/p&gt;

&lt;p&gt;参照：&lt;a href=&quot;https://webarchive.jira.com/wiki/display/Heritrix/A+Quick+Guide+to+Running+Your+First+Crawl+Job&quot;&gt;https://webarchive.jira.com/wiki/display/Heritrix/A+Quick+Guide+to+Running+Your+First+Crawl+Job&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HERITRIX_HOME&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -a 设置用户名和密码，-j 设置抓取到的网页的路径，例如：&lt;/span&gt;
bin/heritrix -a harttle:123456 -j /home/harttle/search-engine/pages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在浏览器打开 https://localhost:8843，登录后根据提示新建一个job。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;配置&lt;/h2&gt;

&lt;p&gt;建立job后，可编辑 crawler-beans.cxml 文件进行设置。heritrix 支持在网页中直接编辑该文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该文件位于 -j 参数指定的路径/job-name/ 下，或者默认位置：$HERITRIX_HOME/jobs/job-name/。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;联系信息&lt;/p&gt;

&lt;p&gt;设置 &lt;code&gt;metadata.operatorContactUrl&lt;/code&gt; 为包含你的联系信息的页面，方便网络管理员联系你。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该属性将被用于填充 HTTP 请求的 &lt;code&gt;User-Agent&lt;/code&gt; 字段&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标服务器&lt;/p&gt;

&lt;p&gt;设置 &lt;code&gt;longerOverrides&lt;/code&gt; 中的 &lt;code&gt;prop&lt;/code&gt; 字段为要处理为web服务器域名&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免heritrix下载媒体文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scope&lt;/code&gt; 字段指定了heritrix的访问范围，为了避免访问媒体文件的 URI，可以编辑 &lt;code&gt;MatchesListRegexDecideRule&lt;/code&gt; 字段，采用如下设置：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;bean &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.archive.modules.deciderules.MatchesListRegexDecideRule&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;decision&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REJECT&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;listLogicalOr&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;regexList&amp;quot;&lt;/span&gt;&amp;gt;
   &amp;lt;list&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avi|wmv|mpe?g|mp3&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rar|zip|tar|gz&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pdf|doc|xls|odt&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;txt|conf|pdf&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;swf&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;js|css&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bmp|gif|jpe?g|png|svg|tiff?&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
     &amp;lt;value&amp;gt;.*&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?i&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;docx?|xlsx?|pptx?&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;/value&amp;gt;
   &amp;lt;/list&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只归档 &lt;code&gt;Content-Type&lt;/code&gt; 为 &lt;code&gt;text/html&lt;/code&gt; 的文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;warcWriter&lt;/code&gt; 字段指定了写入归档的规则，为了只匹配特定 &lt;code&gt;Content-Type&lt;/code&gt; 的文件，可以为该字段添加如下规则：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;bean &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;warcWriter&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.archive.modules.writer.WARCWriterProcessor&amp;quot;&lt;/span&gt;&amp;gt;
   &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldProcessRule&amp;quot;&lt;/span&gt;&amp;gt;
     &amp;lt;bean &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.archive.modules.deciderules.DecideRuleSequence&amp;quot;&lt;/span&gt;&amp;gt;
       &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&amp;gt;
         &amp;lt;list&amp;gt;
           &amp;lt;!-- Begin by REJECTing all... --&amp;gt;
           &amp;lt;bean &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.archive.modules.deciderules.RejectDecideRule&amp;quot;&lt;/span&gt; /&amp;gt;
           &amp;lt;bean &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;org.archive.modules.deciderules.ContentTypeMatchesRegexDecideRule&amp;quot;&lt;/span&gt;&amp;gt;
             &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;decision&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ACCEPT&amp;quot;&lt;/span&gt; /&amp;gt;
             &amp;lt;property &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;regex&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;^text/html.*&amp;quot;&lt;/span&gt; /&amp;gt;
           &amp;lt;/bean&amp;gt;
         &amp;lt;/list&amp;gt;
       &amp;lt;/property&amp;gt;
     &amp;lt;/bean&amp;gt;
   &amp;lt;/property&amp;gt;
   &amp;lt;!-- other properties --&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 heritrix&lt;/p&gt;

&lt;p&gt;在 Web-based UI 中，依次执行 build、launch、unpause 即可启动 heritix。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;网站排名（Page-Rank）&lt;/h1&gt;

&lt;h2&gt;提取链接关系&lt;/h2&gt;

&lt;p&gt;我们现在要进行 Page-Rank，需要获得网页之间的链接关系。可以通过heritrix生成的日志文件（&lt;code&gt;crawl.log&lt;/code&gt;）来提取。&lt;/p&gt;

&lt;p&gt;参见：&lt;a href=&quot;https://webarchive.jira.com/wiki/display/Heritrix/Logs&quot;&gt;https://webarchive.jira.com/wiki/display/Heritrix/Logs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;cat crawl.log | awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;$7==&amp;quot;text/html&amp;quot;{print $6 &amp;quot; =&amp;gt; &amp;quot; $4}&amp;#39;&lt;/span&gt; &amp;gt; links
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们得到了包含链接关系的文件 &lt;code&gt;links&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;进行 Page Rank&lt;/h2&gt;

&lt;p&gt;Page Rank 是 Google 搜索引擎进行网站排名的重要算法之一。&lt;a href=&quot;http://en.wikipedia.org/wiki/Pagerank&quot;&gt;wiki&lt;/a&gt; 给出了 Matlab 实现：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;matlab language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;c&quot;&gt;% Parameter M adjacency matrix where M_i,j represents the link from &amp;#39;j&amp;#39; to &amp;#39;i&amp;#39;, such that for all &amp;#39;j&amp;#39; sum(i, M_i,j) = 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Parameter d damping factor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Parameter v_quadratic_error quadratic error for v&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Return v, a vector of ranks such that v_i is the i-th rank from [0, 1]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[v] &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;M, d, v_quadratic_error&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% N is equal to half the size of M&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M_hat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_quadratic_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;endfunction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;[v] &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rank2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;M, d, v_quadratic_error&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% N is equal to half the size of M&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;% This is now L1, not L2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M_hat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_quadratic_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;c&quot;&gt;% removed the L2 norm of the iterated PR&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是调用过程代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;matlab language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Page Rank 的其他语言实现可以从 GitHub 获得：&lt;a href=&quot;https://github.com/louridas/pagerank&quot;&gt;https://github.com/louridas/pagerank&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;倒排索引（Lucene）&lt;/h1&gt;

&lt;p&gt;倒排索引（Inverted index）被广泛应用在搜索引擎中，它存储着在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。以下通过 Lucene 框架实现索引以及查询。&lt;/p&gt;

&lt;p&gt;官方 Guide：&lt;a href=&quot;http://lucene.apache.org/core/4_5_1/demo/overview-summary.html&quot;&gt;http://lucene.apache.org/core/4_5_1/demo/overview-summary.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;获取页面文件&lt;/h2&gt;

&lt;p&gt;在使用 Lucene 进行全文索引之前，我们需要得到包含页面文件的目录。下面的 shell 脚本将完成 &lt;code&gt;.warc.gz&lt;/code&gt; 到页面文件目录的转换。运行该脚本将产生 &lt;code&gt;files&lt;/code&gt; 目录，其中包含所有的页面文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;页面文件将以编号命名，第一行为 URL，其后为 HTML 内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

less *.warc.gz | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/\r//g&amp;#39;&lt;/span&gt; &amp;gt; pages.txt

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -d files &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir files

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -r line
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;i++
    lines&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; pages.txt

&lt;span class=&quot;nv&quot;&gt;nline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ndoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;i&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nline;i++ &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$line&amp;quot;&lt;/span&gt; in
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;WARC/1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;warc&amp;#39;&lt;/span&gt;
            ;;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;WARC-Type: response&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;warc-valid&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+1]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#*: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;ndoc++
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &amp;gt;&amp;gt; files/&lt;span class=&quot;nv&quot;&gt;$ndoc&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt;&amp;gt; files/&lt;span class=&quot;nv&quot;&gt;$ndoc&lt;/span&gt;
            ;;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1 200 OK&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;warc-valid&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
            ;;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;doc&amp;#39;&lt;/span&gt;
            ;;
        *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;doc&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &amp;gt;&amp;gt; files/&lt;span class=&quot;nv&quot;&gt;$ndoc&lt;/span&gt;
            ;;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;建立索引&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装与配置&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 下载后解压&lt;/span&gt;
tar -xzvf lucene-xxx.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lucene

&lt;span class=&quot;c&quot;&gt;# 设置环境变量，直接加入所有的 jar 包&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLASSPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find -name &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.jar&amp;#39;&lt;/span&gt; | sed &lt;span class=&quot;s2&quot;&gt;&amp;quot;s@^.@$dir@g&amp;quot;&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;:a;N;s/\n/:/;ta&amp;#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立索引与搜索&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 建立索引，files 为页面文件所在目录，会在当前目录产生 index 目录来保存索引信息&lt;/span&gt;
java org.apache.lucene.demo.IndexFiles -docs files

&lt;span class=&quot;c&quot;&gt;# 搜索，将进入交互式搜索程序&lt;/span&gt;
java org.apache.lucene.demo.SearchFiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Tue, 05 Nov 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/web/se-project.html</link>
				<guid isPermaLink="true">http://harttle.github.io/web/se-project.html</guid>
			</item>
		
			<item>
				<title>test</title>
				<description>&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h1&gt;h1&lt;/h1&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h2&gt;h2&lt;/h2&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h3&gt;h3&lt;/h3&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h3&gt;h3&lt;/h3&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h1&gt;h1&lt;/h1&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h2&gt;h2&lt;/h2&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h3&gt;h3&lt;/h3&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;h3&gt;h3&lt;/h3&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;

&lt;p&gt;contents&lt;/p&gt;
</description>
				<pubDate>Tue, 29 Oct 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/%E6%97%A5%E5%BF%97/test.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E6%97%A5%E5%BF%97/test.html</guid>
			</item>
		
			<item>
				<title>算法导论</title>
				<description>&lt;h1&gt;基础知识&lt;/h1&gt;

&lt;h2&gt;算法基础&lt;/h2&gt;

&lt;h3&gt;插入排序&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//INSERTION-SORT(A)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Insert A[j] into the sorted sequence A[1..j-1]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;循环不变式：初始化、保持、终止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;分析算法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;单处理器计算模型：随机访问机（random-access machine，RAM）：算数指令、数据移动指令、控制指令。&lt;/li&gt;
&lt;li&gt;最坏情况、平均情况、增长量级&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;设计算法&lt;/h3&gt;

&lt;h4&gt;分治法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。&lt;/li&gt;
&lt;li&gt;步骤：分解、解决、合并&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//MERGE(A,p,q,r)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrays&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//MERGE-SORT(A,p,r)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;分析分支算法&lt;/h4&gt;

&lt;p&gt;归并排序算法的分析&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分解：计算子数组的中间位置，D(n) = O(1)&lt;/li&gt;
&lt;li&gt;解决：求解规模为n/2的子问题，将贡献 2T(n/2) 的运行时间&lt;/li&gt;
&lt;li&gt;合并：C(n) = O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最坏情况运行时间
$
T(n)=
 \begin{cases}
O(1)=c, n=1\\
2T(n/2)+O(n)=2T(n/2)+cn, n&amp;gt;1
\end{cases}
$&lt;/p&gt;

&lt;p&gt;$T(n)=\Theta(n\lg n)$&lt;/p&gt;

&lt;h2&gt;函数的增长&lt;/h2&gt;

&lt;h3&gt;渐进记号&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;$\Theta$：渐进地给出一个函数的上界和下界&lt;/li&gt;
&lt;li&gt;$O$：只有一个渐进上界&lt;/li&gt;
&lt;li&gt;$\Omega$：只有一个渐进下界&lt;/li&gt;
&lt;li&gt;$o$：非渐进紧确的上界&lt;/li&gt;
&lt;li&gt;$\omega$：非渐进紧确的下界&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;标准记号与常用函数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;单调性&lt;/li&gt;
&lt;li&gt;向下取整与向上取整&lt;/li&gt;
&lt;li&gt;模运算&lt;/li&gt;
&lt;li&gt;多项式&lt;/li&gt;
&lt;li&gt;指数&lt;/li&gt;
&lt;li&gt;对数&lt;/li&gt;
&lt;li&gt;阶乘&lt;/li&gt;
&lt;li&gt;多重函数：重复多次作用在初值上&lt;/li&gt;
&lt;li&gt;多重对数函数&lt;/li&gt;
&lt;li&gt;斐波那契数&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;分治策略&lt;/h2&gt;

&lt;p&gt;在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分解（divide）&lt;/li&gt;
&lt;li&gt;解决（conquer）&lt;/li&gt;
&lt;li&gt;合并（combine）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三种求解递归式的方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代入法：猜测一个界，用数学归纳法证明&lt;/li&gt;
&lt;li&gt;递归树法：将递归式转换为一棵树，级数求和&lt;/li&gt;
&lt;li&gt;主方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;最大子数组问题&lt;/h3&gt;

&lt;h4&gt;暴力求解：$\Omega(n^2)$&lt;/h4&gt;

&lt;h4&gt;分治策略求解&lt;/h4&gt;

&lt;p&gt;任何连续数组所处的位置必然是以下三种之一：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完全位于左子数组&lt;/li&gt;
&lt;li&gt;完全位于右子数组&lt;/li&gt;
&lt;li&gt;跨越了中点：可在线性时间内求出跨越中点的最大子数组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运行时间
$T(n)=\Theta(n\lg n)$&lt;/p&gt;

&lt;h3&gt;矩阵乘法的 Strassen 算法&lt;/h3&gt;

&lt;h4&gt;直接计算&lt;/h4&gt;

&lt;p&gt;SQUARE-MATRIX-MULTIPLY：$T(n)=\Theta(n^3)$&lt;/p&gt;

&lt;h4&gt;简单的分治算法&lt;/h4&gt;

&lt;p&gt;$T(n)=\Theta(n^3)$，简单的分治算法并不由于直接的SQUARE-MATRIX-MULTIPLY过程。&lt;/p&gt;

&lt;h4&gt;Strassen 算法&lt;/h4&gt;

&lt;p&gt;Strassen算法包括四个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将输入矩阵A、B和输出矩阵C分解为$n/2\times n/2$的子矩阵。采用下标计算，时间为$\Omega(n^2)$&lt;/li&gt;
&lt;li&gt;创建10个$n/2\times n/2$的子矩阵$S_1,~S_2,~...,~S_{10}$，每个矩阵保存1中创建的两子矩阵和或差&lt;/li&gt;
&lt;li&gt;使用1中的子矩阵和2中的10个矩阵，递归地计算7个矩阵积$P_1,~P_2,~...,~P_{7}$&lt;/li&gt;
&lt;li&gt;通过 $P_i$ 矩阵的不同组合进行加减运算，计算出结果矩阵C的子矩阵$C_{11},~C_{12},~C_{21},~C_{22}$，花费时间：$\Omega(n^2)$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;递归式：
$
T(n)=
 \begin{cases}
O(1)=c, n=1\\
7T(n/2)+O(n)=2T(n/2)+cn, n&amp;gt;1
\end{cases}
$
根据主方法，得到该递归式的解为$\Omega(n^{\lg 7})$&lt;/p&gt;

&lt;h3&gt;使用主方法求解递归式&lt;/h3&gt;

&lt;p&gt;对于递归式$T(n)=aT(n/b)+f(n)$，将函数$f(n)$与$n^{\log_ba}$进行比较：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;若$f(n)$更大（在多项式意义上），解为$\Omega(f(n))$；&lt;/li&gt;
&lt;li&gt;若$n^{\log_ba}$更大，解为$\Omega(n^{\log_ba})$；&lt;/li&gt;
&lt;li&gt;若大小相当，解为$\Omega(f(n)\lg n)$。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;概率分析和随机算法&lt;/h2&gt;

&lt;h3&gt;雇用问题&lt;/h3&gt;

&lt;p&gt;假设应聘办公助理的候选人编号为1到n，在面试完应聘者i后，如果他比目前的办公助理更合适，就会辞掉当前的办公助理，然后聘用他。估算雇佣过办公助理的总费用（雇佣一个办公助理费用为$c_h$）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HIRE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASSISTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//candidate 0 is a least-qualified dummy candidate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;interview&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;最坏的情形&lt;/h4&gt;

&lt;p&gt;总费用为$O(c_hn)$&lt;/p&gt;

&lt;h4&gt;平均情形&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;平均情况运行时间：概率分布在算法的输入上&lt;/li&gt;
&lt;li&gt;期望运行时间：算法本身做出随机选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;指示器随机变量&lt;/h3&gt;

&lt;p&gt;给定样本空间S和一个事件A，那么事件A对应的 &lt;strong&gt;指示器随机变量&lt;/strong&gt;$I{A}$定义为：
$I{A}=
\begin{cases}
1,~if~A~happened\\
0,~if~A~didn&amp;#39;t~happen
\end{cases}
$&lt;/p&gt;

&lt;p&gt;举一个简单的例子，我们来确定抛掷硬币时正面朝上的期望次数。样本空间为$S={H, T}$，其中$Pr{H}=Pr{T}=1/2$，指示器随机变量
$X_H=I{H}=
\begin{cases}
1,~if~H~happened\\
0,~if~T~happened
\end{cases}
$&lt;/p&gt;

&lt;p&gt;在一次抛掷中，正面朝上的期望次数为指示器变量$X_H$的期望值：
$E[X_H]=E[I{H}]=1\cdot Pr{H} + 0\cdot Pr{T} = 1\cdot (1/2)+ 0\cdot (1/2)=1/2$&lt;/p&gt;

&lt;p&gt;n次抛掷中出现正面的总次数$X=\sum_{i=1}^n X_i$&lt;/p&gt;

&lt;p&gt;正面朝上次数的期望 $E[X]=E\left[\sum_{i=1}^n X_i \right] = \sum_{i=1}^n E[X_i] = \sum_{i=1}^n 1/2 = n/2$&lt;/p&gt;

&lt;h4&gt;用指示器随机变量分析雇用问题&lt;/h4&gt;

&lt;p&gt;应聘者i比1到i-1更有资格的概率为1/i，因而$E[X_i]=1/i$&lt;/p&gt;

&lt;p&gt;故雇佣总数为 $E[X] = E\left[\sum^n_{i=1} X_i \right] = \sum_{i=1}^n 1/i = \ln n$，雇佣费用平均情形下为$O(c_h \ln n)$&lt;/p&gt;

&lt;h3&gt;随机算法&lt;/h3&gt;

&lt;p&gt;算法中的随机排列使得输入次序不再相关，因而没有特别的输入会引出它的最坏情况行为。&lt;/p&gt;

&lt;p&gt;对于雇用问题，只需要随机地变换应聘者序列&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIRE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASSISTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;randomly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidates&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//candidate 0 is a least-qualified dummy candidate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;interview&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;产生 &lt;strong&gt;均匀随机排列&lt;/strong&gt; （等可能地产生数字1~n的每一种排列）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PERMUTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以证明，P中所有元素都唯一的概率至少是 $1-1/n$。假设所有优先级都不同，则过程PERMUTE-BY-SORTING产生输入的均匀随机排列。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RANDOMIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以证明，过程RANDOMIZE-IN-PLACE可计算出一个均匀随机排列。&lt;/p&gt;

&lt;p&gt;具有n个元素的 &lt;strong&gt;k排列&lt;/strong&gt;（k-permutation）是包含这n个元素中的k个元素的序列，并且不重复，一共有 $n!/(n-k)!$种可能的k排列。&lt;/p&gt;

&lt;h1&gt;排序和顺序统计量&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;待排序的项称为 &lt;strong&gt;记录&lt;/strong&gt;（record），每个记录包含一个 &lt;strong&gt;关键字&lt;/strong&gt;（key），即排序问题中要重排的值，记录的剩余部分由 &lt;strong&gt;卫星数据&lt;/strong&gt;（statellite data）组成。&lt;/li&gt;
&lt;li&gt;如果输入数组中仅有常数个元素需要在排序过程中存储在数组之外，则称排序算法是 &lt;strong&gt;原址的&lt;/strong&gt;（in place）。插入排序可以在$\Theta(n^2)$时间内将n个数排好序，是一种非常快的原址排序算法；归并排序有更好的渐近运行时间$\Theta(n\lg n)$，但它使用的MERGE过程并不是原址的。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;最坏情况运行时间&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;平均情况/期望运行时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n^2)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n^2)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n\lg n)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n\lg n)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$O(n\lg n)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n^2)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n\lg n)$（期望）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计数排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(k+n)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(k+n)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基数排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(d(n+k))$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(d(n+k))$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;桶排序&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n^2)$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$\Theta(n)$（平均情况）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;堆排序&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;时间复杂度&lt;/th&gt;
&lt;th&gt;空间原址性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;$O(n\lg n)$&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;$O(n\lg n)$&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;堆&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;计算父节点、左右孩子节点下标&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PARENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最大堆&lt;/strong&gt;
除了根以外的所有节点 i 满足：$A[\rm{PARENT}(i)]\geq A[i]$&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最小堆&lt;/strong&gt;
除了根以外的所有节点 i 满足：$A[\rm{PARENT}(i)]\leq A[i]$&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于完全二叉树，叶节点数 = 非叶节点数 或 非叶节点数+1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;维护堆的性质&lt;/h3&gt;

&lt;p&gt;MAX-HEAPIFY(A, i) 通过逐级下降，使得下标为 i 的根节点的子树符合最大堆的性质&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAPIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAPIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个孩子的子树的大小最多为 $2n/3$（最坏情况发生在树的最底层半满的时候），故MAX-HEAPIFY运行时间 
$T(n) \leq T(2n/3) + \Theta(1)$，解为$T(n) = O(\lg n)$。&lt;/p&gt;

&lt;h3&gt;建堆&lt;/h3&gt;

&lt;p&gt;MAX-HEAPIFY 把大小为 n = A.length 的数组 A[1..n] 转换为最大堆。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 子数组 $A(n/2+1..n)$ 中的元素都是叶节点&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAPIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;渐近上界
BUILD-MAX-HEAP 需要调用MAX-HEAPIFY O(n) 次，故总的时间复杂度为 $O(n\lg n)$，或者$O(h)$。&lt;/li&gt;
&lt;li&gt;更加紧确
含n个元素的堆高度为 $\lfloor \lg n\rfloor$，高度为h的元素数最多为 $\lceil n/2^{h+1} \rceil$，于是 BUILD-MAX-HEAP的时间复杂度为
$O\left( \sum_{h=0}^{\lfloor \lg n\rfloor} \lceil n/2^{h+1} \rceil O(h) \right) = O\left(n\sum_{h=0}^{\lfloor \lg n\rfloor}\frac{h}{2^h}\right) = O\left(n\sum_{h=0}^{\infty}\frac{h}{2^h}\right) = O(n)$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;堆排序算法&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HEAPSORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BUILD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wiith&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAPIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MAX-HEAPIFY 时间复杂度为 $O(\lg n)$，被HEAPSORT n-1 次调用，故 HEAPSORT 的时间复杂度为 $O(n\lg n)$&lt;/p&gt;

&lt;h3&gt;优先队列&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优先队列&lt;/strong&gt; 是一种用来维护由一组元素构成的集合S的数据结构，每个元素有一个相关的值，称为 &lt;strong&gt;关键字&lt;/strong&gt;（key）。优先队列同样有两种形式： &lt;strong&gt;最大优先队列&lt;/strong&gt;和 &lt;strong&gt;最小优先队列&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一个最大优先队列支持以下操作：

&lt;ul&gt;
&lt;li&gt;INSERT(S, x)：把元素x插入集合S中。&lt;/li&gt;
&lt;li&gt;MAXINUM(S)：返回S中具有最大关键字的元素。&lt;/li&gt;
&lt;li&gt;EXTRACT-MAX(S)：去掉并返回S中具有最大关键字的元素。&lt;/li&gt;
&lt;li&gt;INCREASE-KEY(S, x, k)：将元素x的关键字值加到k&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最大优先队列用于共享计算机系统的作业调度，最小优先队列用于基于事件驱动的模拟器（关键字为事件发生时间）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXINUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;heap underflow&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAPIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HEAP-EXTRACT-MAX 的时间复杂度为 $O(\lg n)$（取决于MAX-HEAPIFY的时间复杂度）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INCREASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;new key is smaller than current key&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HEAP-INCREASE-KEY 中当前元素不断与父元素比较，当前元素大则将二者交换，直至当前元素的关键字小于父节点。时间复杂度为$O(\lg n)$。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_INT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HEAP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INCREASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MAX-HEAP-INSERT的时间复杂度为$O(\lg n)$。&lt;/p&gt;

&lt;h2&gt;快速排序&lt;/h2&gt;

&lt;p&gt;快速排序的时间复杂度为$\Theta(n\lg n)$，能够进行原址排序。&lt;/p&gt;

&lt;h3&gt;快速排序的描述&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;QUICKSORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QUICKSORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QUICKSORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//将数组分为两部分，返回临界值下标&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//以最后一个数为主元（pivot element）&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//小于主元子数组的下标上限&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//增加小于主元子数组的大小&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//将A[j]加入小于主元的子数组&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//将主元从数组末尾移动至子数组之间&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了排序一个数组A，初始调用为：QUICKSORT(A, 1, A.length)。&lt;/p&gt;

&lt;h3&gt;快速排序的性能&lt;/h3&gt;

&lt;h4&gt;最坏情况&lt;/h4&gt;

&lt;p&gt;当划分产生的两个子问题分别包含 n-1 和 0 个元素时，最坏情况发生。划分操作的时间复杂度为$\Theta(n)$，$T(0)=\Theta(1)$，这时算法运行时间的递归式为
$T(n) = T(n-1) + T(0) + \Theta(n) = T(n-1) + \Theta(n)$，解为$T(n) = \Theta(n^2)$。&lt;/p&gt;

&lt;h4&gt;最好情况划分&lt;/h4&gt;

&lt;p&gt;当划分产生的两个子问题分别包含$\lfloor n/2 \rfloor$和$\lceil n/2 \rceil-1$个元素时，最好情况发生。算法运行时间递归式为
$T(n) = 2T(n/2) + \Theta(n)$，解为$T(n) = \Theta(n\lg n)$。&lt;/p&gt;

&lt;h4&gt;平衡的划分&lt;/h4&gt;

&lt;p&gt;只要划分是常数比例的，算法的运行时间总是$O(n\lg n)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假设按照 9:1 划分，每层代价之多为 cn，递归深度为 $\log_{10/9}n = \Theta(\lg n)$，故排序的总代价为$O(n\lg n)$。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;对平均情况的直观观察&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对于一次差的划分戒指一个好的划分，将产生三个大小为 0、(n-1)/2-1 和 (n-1)/2 的子数组，划分代价为$\Theta(n) + \Theta(n-1) = \Theta(n)$。&lt;/li&gt;
&lt;li&gt;对于一次好的划分，将产生两个大小为 (n-1)/2 的子数组，划分代价为$\Theta(n)$。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从直观上看，差划分引起的二次划分代价$\Theta(n-1)$可以被吸收到差划分代价$\Theta(n)$中去，而得到与好划分一样好的结果。&lt;/p&gt;

&lt;h3&gt;快速排序的随机化版本&lt;/h3&gt;

&lt;p&gt;可以通过在算法中引入随机性，使得算法对所有输入都能获得较好的期望性能。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//新的划分程序，只是在真正进行划分前进行一次交换&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;快速排序分析&lt;/h3&gt;

&lt;h4&gt;最坏情况分析&lt;/h4&gt;

&lt;p&gt;使用代入法证明快速排序的时间复杂度为$O(n^2)$。假设T(n)为最坏情况下 QUICKSORT 在输入规模为 n 的数据集合上所花费的时间，则有
$T(n) = \max_{0\leq q \leq n-1}(T(q) + T(n-q-1)) + \Theta(n)$
将$T(n)\leq cn^2$带入右侧，得到
$T(n) \leq \max_{0\leq q \leq n-1}(cq^2 + c(n-q-1)^2) + \Theta(n) = cn^2 - c(2n-1) + \Theta(n) \leq cn^2$。
故$T(n) = O(n^2)$&lt;/p&gt;

&lt;h4&gt;期望运行时间&lt;/h4&gt;

&lt;p&gt;设 PARTITION 的第4行所做的比较操作次数为X，则 QUICKSORT 的运行时间为 $O(n+X)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;因为 PARTITION 至多被调用n次，每次调用包括固定的工作量和for循环，for循环都要执行第4行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们考察第四行的比较操作的实际执行次数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将数组A的元素重命名为$z_1,~z_2,~...,~z_n$，其中$z_i$表示第i小的元素。&lt;/li&gt;
&lt;li&gt;定义$Z_{ij} = { z_i~,z_{i+1},~...,~z_j }$为$z_i$和$z_j$之间元素的集合。&lt;/li&gt;
&lt;li&gt;定义指示器随机变量$X_{ij} = I(z_i compared with z_j)$。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因每一对元素至多比较一次，故总的比较次数：
$X=\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}X_{ij}$，
总比较次数的期望：
$E(X) = \sum_{i=1}^{n-1}\sum_{j=i+1}^{n}Pr(z_i~compared~with~z_j)$。&lt;/p&gt;

&lt;p&gt;$z_i$与$z_j$进行比较，当且仅当$Z_ij$（共j-i+1个元素）中被选中的第一个主元为$z_i$或$z_j$，即：
$Pr(z_i~compared~with~z_j) = \frac{2}{j-i+1}$
故总比较次数期望：
$E(X) = \sum_{i=1}^{n-1}\sum_{j=i+1}^{n}\frac{2}{j-i+1} \lt \sum_{i=1}^{n-1}\sum_{k=1}^{n}\frac{2}{k} = \sum_{i=1}^{n-1}O(\lg n) = O(n\lg n)$&lt;/p&gt;

&lt;h2&gt;线性时间排序&lt;/h2&gt;

&lt;h3&gt;比较排序算法的下界&lt;/h3&gt;

&lt;p&gt;比较排序可以被抽象为一棵 &lt;strong&gt;决策树&lt;/strong&gt;。决策树是一棵完全二叉树，它可以表示在给定输入规模情况下，某一特定排序算法对所有元素的比较操作。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在决策树中，每个内部结点以被比较数的下标 i:j 标记，每个叶节点都标注一个序列。排序算法的执行对应于一条从根节点到叶节点的路径，每个内部结点表示一次比较，左子树表示 a[i]&amp;lt;=a[j]的后续比较，右子树表示a[i]&amp;gt;a[j]的后续比较。如图。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/369370/2012081216212084.gif&quot; alt=&quot;决策树模型&quot;&gt;&lt;/p&gt;

&lt;p&gt;在最坏情况下，任何比较排序算法都需要做 $\Omega(n\lg n)$ 次比较。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;因为输入数据的 n! 中可能的情况都必须出现在叶节点，故 $n! \leq 2^h$ ，即 $h \geq \lg(n!) = \Theta(n\lg n)$，$h=\Omega(n\lg n)$。&lt;/li&gt;
&lt;li&gt;比较算法最坏情况下的比较次数等于其决策树的高度。&lt;/li&gt;
&lt;li&gt;堆排序和归并排序都是渐近最优的比较排序算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;计数排序&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;计数排序&lt;/strong&gt;假设n个输入元素均为[0, k]的整数，当 k=O(n) 时，排序的运行时间为 $\Theta(n)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;计数排序的基本思想是：对每一个输入x，确定小于x的元素个数，然后把x直接放到输出数组的相应位置上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;COUNTING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//now C[i] contains the number of elements equal to i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//now C[i] contains the number of elements &amp;lt;= i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downto&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;计数排序遍历了两次A和C，故总时间代价为$\Theta(k+n)$。&lt;/li&gt;
&lt;li&gt;计数排序是  &lt;strong&gt;稳定的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;基数排序&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;基数排序&lt;/strong&gt; 先按 &lt;em&gt;最低有效位&lt;/em&gt; 进行排序，之后用同样的方法按次低有效位进行排序，直至所有数都排好。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计数排序是一种用在卡片排序机上的算法，因卡片机需要排成一排而不能从高位递归地排序。&lt;/li&gt;
&lt;li&gt;为了确保基数排序的正确性，一位数排序算法必须是稳定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RADIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给定n个k进制d位数，如果使用的稳定排序算法耗时$\Theta(n+k)$，那么RADIX-SORT的时间代价为$\Theta(d(n+k))$。&lt;/p&gt;

&lt;p&gt;给定一个b位2进制数（k=2）和正整数r&amp;lt;=b，如果使用的稳定排序算法耗时$\Theta(n+k)$，那么RADIX-SORT的时间代价为$\Theta((b/r)(n+2^r))$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;将b位2进制数转化为b/2位$2^r$进制数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设$b \geq \lfloor \lg n \rfloor$，选择$r = \lfloor \lg n \rfloor$，得到RADIX-SORT运行时间为$\Theta(bn/\lg n)$。特殊地，如果$b = O(\lg n)$，将得到基数排序的运行时间：$\Theta(n)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;渐近意义上，基数排序要比快速排序的期望运行时间（$\Theta(n\lg n)$）更好，但是两个表达式中隐含的常数因子是不同的。
利用计数排序作为中间稳定排序的基数排序不是原址排序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;桶排序&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;桶排序&lt;/strong&gt;假设输入数据服从均匀分布，平均情况下时间代价为 O(n)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;桶排序将 [0, 1) 区间划分为 n 个相同大小的子区间，称为 &lt;strong&gt;桶&lt;/strong&gt;。然后将 n 个输入按大小放入各个桶中，先对每个桶中的数进行排序，然后遍历输出每个桶中的数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;BUCKET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],...,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;together&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;桶排序的时间代价为：
$T(n) = \Theta(n) + \sum^{n-1}_{i=0}O(n_i^2)$
期望运行时间：
$E[T(n)] = E\left[ \Theta(n) + \sum^{n-1}_{i=0}O(n_i^2) \right] = \Theta(n)+ \sum^{n-1}_{i=0}O(E[n_i^2])$&lt;/p&gt;

&lt;p&gt;定义指示器随机变量 $X_{ij} = I{A[j] in bucket i}$，则$n_i = \sum^n_{j=1}X_{ij}$，
$E[n^2_i] = E\left[ \left( \sum_{j=1}^n X_{ij} \right)^2 \right] = \sum^n_{j=1}E[X_{ij}^2] + \sum_{1\leq j \leq n} \sum_{1\leq k \leq n, k \neq j} E[X_{ij}X_{ik}]$&lt;/p&gt;

&lt;p&gt;而$E[X_{ij}X_{ik}] = E[X_{ij}^2]=\frac{1}{n^2}$，$E[X_{ij}^2] = 1^2\cdot \frac{1}{n} + 0^2\cdot \left( 1-\frac{1}{n}) \right) = \frac{1}{n}$，
故$E[n^2_i] = 2 - 1/n$，桶排序的期望运行时间 $E[T(n)] = \Theta(n) + n\cdot O(2-1/n) = \Theta(n)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;即使输入数据不服从均匀分布，只要所有桶的大小的平方和与元素数呈线性关系，期望运行时间就是$\Theta(n)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;中位数和顺序统计量&lt;/h2&gt;

&lt;p&gt;在一个由n个元素组成的集合中，第i个 &lt;strong&gt;顺序统计量&lt;/strong&gt;（order statistic）是该集合中第i小的元素， &lt;strong&gt;最小值&lt;/strong&gt; 是第一个顺序统计量， &lt;strong&gt;最大值&lt;/strong&gt; 是第n个顺序统计量， &lt;strong&gt;中位数&lt;/strong&gt; 是所属集合的“中点元素”。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;n为奇数时，中位数是唯一的；n为偶数时，存在两个中位数，分别为 &lt;strong&gt;上中位数&lt;/strong&gt;和 &lt;strong&gt;下中位数&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;选择问题&lt;/strong&gt;定义为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;输入&lt;/strong&gt;：一个包含n个数的集合A和整数i（1&amp;lt;=i&amp;lt;=n）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出&lt;/strong&gt;：元素$x\in A$，且A中恰好有i-1个其他元素小于它&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;最小值和最大值&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MINIMUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;找到最小值比较次数上界为 n-1&lt;/li&gt;
&lt;li&gt;同时找出最大值和最小值比较次数上界为$3\lfloor n/2 \rfloor$
&amp;gt; 如果n为奇数，将最大值最小值设为第一个元素，成对比较其余元素，将较大者与最大值比较，将较小者与最小值比较；如果n为偶数，比较前两个，将最大值设为较大者，最小值设为较小者，此后继续成对比较。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;期望为线性时间的选择算法&lt;/h3&gt;

&lt;p&gt;RANDOMIZED-SELECT以快速排序算法为模型，但只处理划分后的一边，期望运行时间为$\Theta(n)$。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//the pivot value is the answer&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOMIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RANDOMIZED-SELECT的最坏情况运行时间为$\Theta(n^2)$，即使找最小元素也是如此，因为在每次划分时极不走运地总是按余下元素中最大的来进行划分，而划分操作需要$\Theta(n)$时间。&lt;/p&gt;

&lt;p&gt;假设所有元素都是互异的，在期望线性时间内，我们可以找到任一顺序统计量，特别是中位数。即RANDOMIZED-SELECT算法的期望运行时间为$\Theta(n)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;可通过定义子数组A[p..q]正好包含k个元素的顺序统计量来得到递归式并使用归纳法加以证明。直观地讲，因为平均每次只保留一半，每层调用的执行时间将是等比数列，求和后得到总时间为2n。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;最坏情况为线性时间的选择算法&lt;/h3&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将n个元素划分为n/5组&lt;/li&gt;
&lt;li&gt;寻找每组的中位数&lt;/li&gt;
&lt;li&gt;使用SELECT找出上一步中找出的中位数的中位数x&lt;/li&gt;
&lt;li&gt;使用x作为主元执行PARTITION，则x为第k小的元素&lt;/li&gt;
&lt;li&gt;如果i==k，返回x；如果i&lt;k，在低区调用SELECT找出第i小的元素；如果i&gt;k，在高区调用SELECT查找第i-k小的元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行时间递归式为
$T(n) = 
\begin{cases}
O(1),~if~n&amp;lt;140\\
T(\lceil n/5 \rceil) + T(7n/10+6) + O(n),~if~n \geq 140
\end{cases}
$，解为$O(n)$&lt;/p&gt;

&lt;h1&gt;数据结构&lt;/h1&gt;

&lt;h2&gt;栈和队列&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;（stack）实现的是一种后进先出策略。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;PUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;POP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMPTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;underflow&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;队列&lt;/strong&gt;（queue）实现的是一种先进先出策略。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;ENQUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEQUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;链表&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;双向链表&lt;/strong&gt;（doubly linked list）的每个元素都是一个对象，每个对象有一个关键字key和两个指针：next和prev。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果x.prev=NIL，则元素x没有先驱，因此是链表的第一个元素，即链表的 &lt;strong&gt;头&lt;/strong&gt;（head）；如果x.next=NIL，则元素x没有后继，因此是链表的最后一个元素，即链表的 &lt;strong&gt;尾&lt;/strong&gt;（tail）。&lt;/li&gt;
&lt;li&gt;L.head 指向链表的第一个元素。如果L.head=NIL，则链表为空。&lt;/li&gt;
&lt;li&gt;如果一个链表是 &lt;strong&gt;单链接的&lt;/strong&gt;（singly linked），则省略每个元素中的prev指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于存在 &lt;strong&gt;哨兵&lt;/strong&gt;（sentinel）的双向循环链表（circular，doubly linked list with a sentinel），L.nil.next指向表头，L.nil.prev指向表尾。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;慎用哨兵，假如有许多个很短的链表，哨兵将造成严重的存储浪费。仅当可以真正简化代码时才使用哨兵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;指针和对象的实现&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对象的单数组表示&lt;/li&gt;
&lt;li&gt;对象的多数组表示&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象的分配与释放&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;垃圾收集器&lt;/strong&gt;（garbage collector）负责确定哪些对象是未使用的。&lt;/li&gt;
&lt;li&gt;把自由对象保存在一个单链表中，称为 &lt;strong&gt;自由表&lt;/strong&gt;（free list），自由表类似一个栈，下一个被分配的对象就是最后被释放的那个。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//全局变量free指向自由表中的第一个元素&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLOCATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;out of space&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;有根数的表示&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;二叉树&lt;/strong&gt;T的属性p、left、right分别存放指向父结点、左孩子和右孩子的指针。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果x.p = NIL，则x是根节点；如果x没有左孩子，则 x.left = NIL，右孩子的情况与此类似；属性T.root 指向整棵树T的根节点。如果T.root = NIL，则该树为空。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;分支无限制的有根数&lt;/strong&gt;可以使用 &lt;strong&gt;左孩子有兄弟表示法&lt;/strong&gt;（left-child，right-sibling representation）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x.left-child 指向结点x最左边的孩子结点
x.right-sibling 指向右侧相邻的兄弟结点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;树的其他表示方法：对一棵完全二叉树使用堆来表示，堆用一个单数组加上堆的最末结点的下标表示。&lt;/p&gt;

&lt;h2&gt;散列表&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;散列表&lt;/strong&gt;（hash table）是实现了字典操作（INSERT，SEARCH，DELETE）的一种有效数据结构。在一些合理的假设下，在散列表中查找一个元素的平均时间是 O(1) 。&lt;/p&gt;

&lt;h3&gt;直接寻址表&lt;/h3&gt;

&lt;p&gt;在直接寻址方式下，具有关键字k的元素被放在槽k中。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为表示动态集合，我们用一个称为 &lt;strong&gt;直接寻址表&lt;/strong&gt;（direct-address table）的数组，记为 T[0..m-1]。数组中的位置称为 &lt;strong&gt;槽&lt;/strong&gt;（slot），每个槽对应全域U中的一个关键字。如果该集合中没有关键字为k的元素，则 T[k]=NIL。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;几个字典操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;DIRECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DIRECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSEART&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DIRECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;散列表&lt;/h3&gt;

&lt;p&gt;在散列方式下，具有关键字k的元素方舟子槽 h(k) 中。即利用 &lt;strong&gt;散列函数&lt;/strong&gt;（hash function）h，由关键字 k 计算出槽的位置。函数h将关键字的全域U映射到 &lt;strong&gt;散列表&lt;/strong&gt;（hash table）T的槽位上：
h: U -&amp;gt; {0,1,...,m-1}&lt;/p&gt;

&lt;h4&gt;通过链接法解决冲突&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;CHAINED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CHAINED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CHAINED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;链接法散列的分析&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;定义一个能存放n个元素的，具有m个槽位的散列表T的 &lt;strong&gt;装载因子&lt;/strong&gt;（load factor）$\alpha = n/m$。&lt;/li&gt;
&lt;li&gt;简单均匀散列（simple uniform hashing）：任何一个给定元素等可能地散列到m个槽位中的任何一个，且与其他元素被散列到什么位置上无关。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在简单均匀三列的假设下，对于用链接法解决冲突的散列表，一次不成功查找的平均时间为 $\Theta(1+\alpha)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于一次不成功的查找，首先计算槽位置 h(k)，时间为 $\Theta(1)$；然后遍历该槽上链表中的所有元素，平均个数为 $\alpha$。故一次不成功查找的平均时间为 $\Theta(1+\alpha)$。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在简单均匀三列的假设下，对于用链接法解决冲突的散列表，一次成功查找的平均时间为 $\Theta(1+\alpha)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;同上，但是遍历槽上链表中的元素时，平均遍历个数为 $\alpha/2$，故一次成功查找的平均时间为 $\Theta(1+\alpha/2)=\Theta(1+\alpha)$。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;散列函数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;好的散列函数的特点&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;满足简单均匀散列假设&lt;/li&gt;
&lt;li&gt;散列值在某种程度上应独立于数据可能存在的任何模式&lt;/li&gt;
&lt;li&gt;某些很近似的关键字具有截然不同的散列值&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;除法散列法&lt;/h4&gt;

&lt;p&gt;h(k) = k mod m&lt;/p&gt;

&lt;p&gt;当应用除法散列法时，要避免选择m的某些值（例如远离2的幂次）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假设 $m=2^p-1$，k 为按基数$2^p$表示的字符串，则很容易证明，散列值只与字符串各字符ASCII值的和有关。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;乘法散列法&lt;/h4&gt;

&lt;p&gt;$h(k) = \lfloor m(kA \rm{mod}~1) \rfloor$，$0&amp;lt;A&amp;lt;1$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为存储方便，m一般选择2的幂次。&lt;/li&gt;
&lt;li&gt;A的最佳取值与待散列数据的特征有关。Knuth认为，$A \approx (\sqrt{5} -1)/2$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;全域散列法&lt;/h4&gt;

&lt;p&gt;任何一个特定的散列函数都可通过选择特定的关键字，使得n个关键字全部散列到同一个槽中，此时平均检索时间为$\Theta(n)$。为了避免这种情况，可以随机地选择散列函数，使之独立于要存储的关键字。这种方法称为 &lt;strong&gt;全域散列&lt;/strong&gt;（universal hashing）&lt;/p&gt;

&lt;h3&gt;开放寻址法&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;开放寻址法&lt;/strong&gt;（open addressing）中，所有的元素都存放在散列表里，每个表项包含动态集合中的一个元素，或者NIL。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;此时，装载因子永远不会超过1。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了插入一个元素，需要连续地检查散列表，称为 &lt;strong&gt;探查&lt;/strong&gt;（probe）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;需要将散列函数加以扩充，将探查号作为第二个参数。对于每个关键字 k，产生 0~m-1 的探查序列（同样，m为槽数，n为元素数）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//j为探查序列的第i项的存储位置&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hash table overflow&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除操作比较困难。可以将删除的元素赋值为DELETED而不是NIL，使得在此仍可以插入元素，而SEARCH则会跳过该槽。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;此时，查找时间不再依赖于装载因子了。为此，在必须删除关键字的应用中，更常见的做法是采用链接法来解决冲突。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;线性探查&lt;/h4&gt;

&lt;p&gt;在 &lt;strong&gt;线性探查&lt;/strong&gt;（linear probing）中，采用散列函数：
$h(k, i) = (h&amp;#39;(k) +i )\rm{mod}~m,~i=0,1,...,m-1$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;随着连续被占用的槽不断增加，平均查找时间随之增加。称为 &lt;strong&gt;一次群集&lt;/strong&gt;（primary clustering）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;二次探查&lt;/h4&gt;

&lt;p&gt;在 &lt;strong&gt;二次探查&lt;/strong&gt;（quadratic probing）中，采用散列函数：
$h(k, i) = (h&amp;#39;(k) + c_1 i + c_2 i^2 ) \rm{mod}~m$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在二次探查中，如果两关键字的初始探查位置相同，在他们的探查序列也是相同的。称为 &lt;strong&gt;二次群集&lt;/strong&gt;（secondary clustering）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;双重散列&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;双重散列&lt;/strong&gt;（double hashing）是用于开放寻址法的最好方法之一。采用如下散列函数
$h(k,i) = (h_1(k) + ih^2(k)) \rm{mod}~m$&lt;/p&gt;

&lt;h4&gt;开放寻址散列的分析&lt;/h4&gt;

&lt;p&gt;给定一个装载因子为$\alpha$的开放寻址散列表，并假设均匀散列，则对于一次不成功的查找，期望的探查次数至多为$1/(1-\alpha)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于不成功的查找，第j次查找相当于在 m-(j-1) 个未探查的槽中，查找 n-(j-1) 个元素中的任一个。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;给定一个装载因子为$\alpha$的开放寻址散列表，平均情况下，向一个装载因子为 $\alpha$ 的开放寻址散列表中插入一个元素至多需要做 $1/(1-\alpha)$ 次探查。&lt;/p&gt;

&lt;p&gt;对于一个装载因子为$\alpha&amp;lt;1$的开放寻址散列表，一次成功查找中的探查期望数至多为$\frac{1}{\alpha} \ln \frac{1}{1-\alpha}$。&lt;/p&gt;

&lt;h3&gt;完全散列&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;完全散列&lt;/strong&gt;（perfect hashing）进行查找时，能在最坏情况下用 O(1) 次访存完成。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;采用两级的散列方法设计完全散列方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;二叉搜索树&lt;/h2&gt;

&lt;h3&gt;什么是二叉搜索树&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;二叉搜索树&lt;/strong&gt;：对任何结点x，其左子树中的关键字最大不超过x.key，其右子树中的关键字最小不低于x.key。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;二叉搜索树不一定是平衡的，其操作时间为 O(h)。当其非常不平衡时，O(h) 将远远超过 O(lg n)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;中序遍历&lt;/strong&gt;（inorder tree walk）：输出的子树根的关键字位于其左子树的关键字值和右子树的关键字值之间。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;类似， &lt;strong&gt;先序遍历&lt;/strong&gt;（preorder tree walk）中输出根的关键字在其子树的关键字之前； &lt;strong&gt;后序遍历&lt;/strong&gt;（postorder tree walk）输出的根的关键字在其子树的关键字之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;INORDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WALK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;INORDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WALK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;INORDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WALK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;查询二叉搜索树&lt;/h3&gt;

&lt;h4&gt;查找关键字k&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;输入一个指向树根的指针x和关键字k，如果这个结点存在，TREE-SEARCH返回一个指向关键字为k的结点的指针；否则返回NIL。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者采用非递归方式&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在大多数计算机，接待版本的效率要高得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;ITERATIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;查找最小和最大元素&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MINIMUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXIMUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;先驱和后继&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCESSOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//右子树存在：返回右子树最小值&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MINIMUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//右子树不存在：返回第一个在右侧的祖父结点&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一棵高度为h的二叉搜索树上，动态集合上的操作 SEARCH、MINIMUM、MAXIMUM、SUCCESSOR和PREDECESSOR可以在O(h)时间内完成。&lt;/p&gt;

&lt;h3&gt;插入和删除&lt;/h3&gt;

&lt;h4&gt;插入&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;删除&lt;/h4&gt;

&lt;p&gt;从二叉搜索树T中删除结点x分为以下4中情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;x无左子树
使用x的右子树代替x&lt;/li&gt;
&lt;li&gt;x无右子树
使用x的左子树代替x&lt;/li&gt;
&lt;li&gt;x右子树无左子树
使用x的右子树代替x，x的左子树作为x右子树的左子树&lt;/li&gt;
&lt;li&gt;x右子树有右子树
使用x的右子树代替x，递归右子树的左子树直至NIL，x的左子树代替这个NIL&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;左子树（如果有的话）应放在右子树的MINIMUM处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在一棵高度为h的二叉搜索树上，动态集合上的操作 TREE-INSERT、TREE-DELETE可以在O(h)时间内完成。&lt;/p&gt;

&lt;h3&gt;随机构建二叉搜索树&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;随机构建二叉搜索树&lt;/strong&gt;（randomly built binary search tree）为按随机次序插入这些关键字到一棵初始的空树而生成的树，这里输入关键字的 n! 个排列中的每个都是等可能地出现。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们用 $X_n$ 表示一棵有n个不同关键字的二叉搜索树的 &lt;strong&gt;高度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指数高度&lt;/strong&gt;（exponential height）定义为$Y_n = 2^{X_n}$&lt;/li&gt;
&lt;li&gt;关键字的 &lt;strong&gt;秩&lt;/strong&gt;（rank）$R_n$代表该关键字在排好序的集合中占据的位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;红黑树&lt;/h2&gt;

&lt;h3&gt;红黑树的性质&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;红黑树&lt;/strong&gt;（red-black tree）是许多“平衡”搜索树中的一种，可以保证在最坏情况下基本动态集合操作的时间复杂度为 O(lg n)。&lt;/p&gt;

&lt;p&gt;一棵红黑树是满足下面 &lt;strong&gt;红黑性质&lt;/strong&gt;的二叉搜索树：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个结点或是红色的，或是黑色的&lt;/li&gt;
&lt;li&gt;根结点是黑色的&lt;/li&gt;
&lt;li&gt;每个叶结点（NIL）都是黑色的&lt;/li&gt;
&lt;li&gt;如果一个结点是红色的，则它的两个子结点都是黑色的&lt;/li&gt;
&lt;li&gt;对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;从某个结点x出发到达一个叶结点的任意一条简单路径上的黑色结点个数称为该结点的 &lt;strong&gt;黑高&lt;/strong&gt;（black-height），记为 bh(x)。定义 &lt;strong&gt;红黑树的黑高&lt;/strong&gt;为其根节点的黑高。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一棵有n个内部结点的红黑树的高度至多为 $2\lg (n+1)$。&lt;/p&gt;

&lt;h2&gt;数据结构的扩张&lt;/h2&gt;

&lt;p&gt;通过存储额外信息的方法来扩张一种标准的数据结构，然后对这种数据结构，编写新的操作来支持所需要的应用。&lt;/p&gt;

&lt;h3&gt;动态顺序统计&lt;/h3&gt;

&lt;p&gt;修改红黑树，使得可以在 O(lg n) 时间内确定任何顺序统计量。给每个结点x添加一个属性size保存以x为根的子树的结点个数。&lt;/p&gt;

&lt;h4&gt;查找具有给定秩的元素&lt;/h4&gt;

&lt;p&gt;过程OS-SELECT(x, i)返回一个指针，指向以x为根的子树中包含第i小关键字的结点。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;确定一个元素的秩&lt;/h4&gt;

&lt;p&gt;过程OS-RANK返回对T中序遍历对应的线性序列中x的位置。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RANK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;如何扩张数据结构&lt;/h3&gt;

&lt;p&gt;扩张一种数据结构可以分为四个步骤&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择一种基础数据结构&lt;/li&gt;
&lt;li&gt;确定基础数据结构中要维护的附加信息&lt;/li&gt;
&lt;li&gt;检验基础数据结构上的基本修改操作能否维护附加信息&lt;/li&gt;
&lt;li&gt;设计一些新的操作&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;设f是n个结点的红黑树T扩张的属性，且假设对任一结点x，f的值仅依赖于结点x、x.left、x.right的信息，还可能包括x.left.f和x.right.f。那么我们可以在插入和删除操作期间对T的所有节点的f值进行维护，并且不影响这两个操作 O(lg n) 的渐近时间性能。&lt;/p&gt;

&lt;h3&gt;区间树&lt;/h3&gt;

&lt;p&gt;通过扩张红黑树来支持由区间构成的动态集合上的一些操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INTERVAL-INSEART(T, x)：将包含区间属性int的元素x插入到区间树T中&lt;/li&gt;
&lt;li&gt;INTERVAL-DELETE(T, x)：从区间树T中删除元素x&lt;/li&gt;
&lt;li&gt;INTERVAL-SEARCH(T, i)：返回一个指向区间树T中元素x的指针，使 x.int 与 i 重叠；若此元素不存在，则返回 T.nil&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;区间三分率&lt;/strong&gt;（interval trichotomy）：1. i 与 i&amp;#39; 重叠；2. i 在 i&amp;#39; 的右边；3. i 在 i&amp;#39; 的左边
&lt;strong&gt;高端点&lt;/strong&gt;（high endpoint）：i.hight
&lt;strong&gt;低端点&lt;/strong&gt;（low endpoint）：i.low
&lt;strong&gt;重叠&lt;/strong&gt;（overlap）：i.low &amp;lt;= i&amp;#39;.high 且 i&amp;#39;.low &amp;lt;= i.high&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;附加信息：在结点x中添加属性 max，它是以x为根的子树中所有区间端点的最大值。&lt;/p&gt;

&lt;p&gt;新的操作：INTERVAL-SEARCH(T, i)，用来查找树T中与区间i重叠的那个结点，若不存在返回哨兵 T.nil 的指针。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overlap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;高级设计和分析技术&lt;/h1&gt;

&lt;h2&gt;动态规划&lt;/h2&gt;

&lt;p&gt;动态规划方法通常用来求解 &lt;strong&gt;最优化问题&lt;/strong&gt;（optimization problem），通常有四个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;刻画一个最优解的特征&lt;/li&gt;
&lt;li&gt;递归地定义最优解的值&lt;/li&gt;
&lt;li&gt;计算最优解的值&lt;/li&gt;
&lt;li&gt;利用计算出的信息构造一个最优解&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;动态规划&lt;/strong&gt;（dynamic programming）与分治方法相似，都是通过组合子问题的解来求解原问题。区别在于分治法的子问题互不相交，而动态规划应用于子问题重叠的情况。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;钢条切割问题&lt;/h3&gt;

&lt;p&gt;问题定义：给定一段长度为n的钢条和价格表$p_i (i=1,2,...,n)$，求切割钢条方案，使得销售收益$r_n$最大。&lt;/p&gt;

&lt;p&gt;钢条切割问题满足 &lt;strong&gt;最优子结构&lt;/strong&gt;（optimal substructure）性质：问题的最优解由相关子问题的最优解组合而成，这些子问题可以独立求解。&lt;/p&gt;

&lt;h4&gt;直接的自顶向下的递归方法&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法的运行时间为 $T(n)=2^n$。&lt;/p&gt;

&lt;h4&gt;带备忘的自顶向下法&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MEMOIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEROIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MEMOIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMOIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法的渐近运行时间为 $\Theta(n^2)$。&lt;/p&gt;

&lt;h4&gt;自底向上法&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;BOTTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法与自顶向下法有相同的渐近运行时间。&lt;/p&gt;

&lt;h4&gt;重构解&lt;/h4&gt;

&lt;p&gt;扩展 BOTTOM-UP-CUT-ROD 算法，计算最大收益$r_j$同时，记录最优解对应的第一段钢条的切割长度 $s_j$。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;EXTENDED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOTTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出长度为n的钢条的完整的最优切割方案&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOLUTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTENDED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOTTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;矩阵链乘法&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;矩阵链乘法&lt;/strong&gt;（matrix-chain multiplication problem）可描述如下：给定n个矩阵的链 &lt;A1,A2,...An&gt;，矩阵 Ai 的规模为 $p_{i-1}\times p_i$，求完全括号化方案，使得计算乘积 A1A2...An 所需的标量乘法次数最少。&lt;/p&gt;

&lt;p&gt;我们称有如下性质的矩阵乘积链为 &lt;strong&gt;完全括号化&lt;/strong&gt;（fully parenthesized）：它是单一矩阵，或者两个完全括号化的矩阵乘积链的积，且已外加括号。括号化方案的数量与n呈指数关系，通过暴力搜索穷尽所有可能的括号化方案来寻找最优方案，是一个糟糕的策略。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个例子，计算三个矩阵连乘{A1，A2，A3}；维数分别为10*100 , 100*5 , 5*50
按此顺序计算需要的次数（（A1*A2）*A3）:10X100X5+10X5X50=7500次
按此顺序计算需要的次数（A1*（A2*A3））:10X5X50+10X100X50=75000次
所以问题是：如何确定运算顺序，可以使计算量达到最小化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;子问题：令m[i][j]表示第i个矩阵至第j个矩阵这段的最优解。
如果i=j，则m[i][j]这段中就一个矩阵，需要计算的次数为0；
如果i&amp;gt;j，则m[i][j]=min{m[i][k]+m[k+1][j]+p[i-1]Xp[k]Xp[j]}，其中i&amp;lt;=k&amp;lt;j ;&lt;/p&gt;

&lt;p&gt;注意计算顺序，保证在计算 m[i][j] 的时候，m[i][k]和m[k+1][j]已经计算出来了。&lt;/p&gt;

&lt;p&gt;求解表 m&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MATRIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;构造最优解&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPTIMAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARENS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ai&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPTIMAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARENS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPTIMAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARENS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;动态规划原理&lt;/h3&gt;

&lt;p&gt;适合应用动态规划方法求解的最优化问题应该具备两个要素：最优子结构和子问题重叠。&lt;/p&gt;

&lt;p&gt;给定一个有向图 G=(V,E) 和两个顶点 $u,~v\in V$。
&lt;strong&gt;无权最短路径&lt;/strong&gt;：找到一条从 u 到 v 的边数最少的路径。这条路径必然是简单路径。
&lt;strong&gt;无权最长路径&lt;/strong&gt;：找到一条从 u 到 v 的边数最多的路径，这条路径要求是简单路径。&lt;/p&gt;

&lt;p&gt;无权最短路径具有最优子结构性质，而无权最长路径没有该性质。原因在于，虽然最长路径问题和最短路径问题的解都用到了两个子问题，但两个最长简单路径子问题是相关的，而两个最短路径子问题是 &lt;strong&gt;无关的&lt;/strong&gt;（independent）。&lt;/p&gt;

&lt;p&gt;如果递归算法反复求解相同的子问题，我们就称最优化问题具有 &lt;strong&gt;重叠子问题&lt;/strong&gt;（overlapping subproblems）性质。与之相反，适合用分治方法求解的问题通常在递归的每一步都生成全新的问题。直接的递归算法无疑会重复计算每个子问题，而带备忘的递归算法可以达到与带备忘自顶向下的动态规划算法相似的效率。&lt;/p&gt;

&lt;h3&gt;最长公共子序列&lt;/h3&gt;

&lt;p&gt;给定一个序列X[1..m]，另一个序列Z[1..k]满足如下条件时称为X的子序列：存在一个严格递增的X的下标序列 i[1..k] ，对所有的 1&amp;lt;=j&amp;lt;=k，满足 x[i[j]] = z[j]。&lt;/p&gt;

&lt;p&gt;c[i,j]表示X[i]和Y[j]的 &lt;strong&gt;最长公共子序列&lt;/strong&gt;（longest commen subsequence，LCS），根据 LCS 的最优子结构性质，可得到如下公式
$
c[i,j] = \begin{cases}
0,~if~i=0~or~j=0\\
c[i-1,j-1]+1,~if~i,j&amp;gt;0~and~x_i=y_j\\
max(c[i,j-1],c[i-1,j]),~if~i,j&amp;gt;0~and~x_i\neq y_j
\end{cases}
$&lt;/p&gt;

&lt;p&gt;通过动态规划的方法，可以先求解表c，再根据表c构造LCS。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;另外，对于LCS算法，每个c[i,j]只依赖于c[i-1,j], c[i,j-1], c[i-1,j-1]和x,y的关系，用这些可以在常数时间内计算c[i,j]，因此完全可以去掉表c，只需要常量的存储。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;最优二叉搜索树&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;最优二叉搜索树&lt;/strong&gt;（optimal binary search tree）：给定一个n个不同关键字的已排序的序列K，希望构造一棵二叉搜索树。每个关键字都有一个概率表示其搜索频率，我们希望该二叉搜索树的期望搜索代价最小。&lt;/p&gt;

&lt;p&gt;最优子结构：如果一棵最优二叉搜索树T有一棵子树T‘，那么T&amp;#39;必然是其包含的关键字构成的子问题的最优解。递归式为：
$
e[i,j] = \begin{cases}
q_{i-1},~if~j=i-1\\
\min_{i\leq r \leq j} { e[i,r-1]+e[r+1,j]+w(i,j) },~if~i\leq j
\end{cases}
$&lt;/p&gt;

&lt;p&gt;可以通过类似矩阵链乘的算法进行求解，时间复杂度也是$\Theta(n^3)$。&lt;/p&gt;

&lt;h2&gt;贪心算法&lt;/h2&gt;

&lt;h3&gt;活动选择问题&lt;/h3&gt;

&lt;p&gt;问题描述：假定有n个 &lt;strong&gt;活动&lt;/strong&gt;（activity）的集合S，这些活动使用同一资源（即同一时刻只供一个活动使用）。每个活动有一个 &lt;strong&gt;开始时间&lt;/strong&gt;（s[i]）和 &lt;strong&gt;结束时间&lt;/strong&gt;（f[i]），在 &lt;strong&gt;活动选择问题&lt;/strong&gt;中，我们希望选出一个最大兼容活动集。假定活动已按结束时间递增排序。&lt;/p&gt;

&lt;h4&gt;动态规划法&lt;/h4&gt;

&lt;p&gt;$S_{ij}$ 表示结束时间在活动 i 结束后 j 开始前的活动集合，c[i,j] 表示 $S_{ij}$ 的最优解的大小，则
$
c[i,j]=\begin{cases}
0,~if S_{ij} = \emptyset\\
max{ c[i,k]+c[k,j]+1 },~if S_{ij} \neq \emptyset
\end{cases}
$
可以通过带备忘的递归算法，或者自底向上法填写表项。&lt;/p&gt;

&lt;h4&gt;贪心选择&lt;/h4&gt;

&lt;p&gt;加入无需求解所有子问题就可以选择一个活动加入最优解，将省去上式中考察所有选择的过程，即 &lt;strong&gt;贪心选择&lt;/strong&gt;。$S_k={a_i\in S: s_i \geq f_k}$ 为在 $a_k$ 结束后开始的任务集合。&lt;/p&gt;

&lt;p&gt;递归贪心算法 RECURSIVE-ACTIVITY-SELECTOR 的输入为两个数组 s 和 f，表示活动的开始和结束时间，下标 k 指出要求解的子问题 $S_k$，以及问题规模 n。返回 $S_k$ 的一个最大兼容活动集。求解原问题可以调用 RECURSIVE-ACTIVITY-SELECTOR(s,f,0,n)。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RECURSIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTIVITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECURSIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTIVITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以转换为迭代贪心算法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;GREEDY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTIVITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;贪心算法原理&lt;/h3&gt;

&lt;p&gt;如果一个问题的最优解包含其子问题的最优解，则称此问题具有 &lt;strong&gt;最优子结构&lt;/strong&gt;星坠，此性质是能否应用动态规划和贪心方法的关键要素。两者的差别在于 &lt;strong&gt;贪心选择性质&lt;/strong&gt;（greedy-choice property）：我们可以通过做出局部最优（贪心）选择来构造全局最优解。&lt;/p&gt;

&lt;h4&gt;贪心与动态规划&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;0-1 背包问题&lt;/strong&gt;（0-1 knapsack problem）：正在抢劫商店的小偷发现n个商品，第i个商品价值v[i]美元，重w[i]磅。小偷希望拿走尽量多的物品，而他的背包最多容纳W磅的物品。对于每个商品小偷要么完整拿走，要么把它留下，不能部分拿走或拿走多次。
&lt;strong&gt;分数背包问题&lt;/strong&gt;（fractional knapsack problem）中，设定于 0-1背包问题一样，但低于每一个商品，小偷可以拿走其一部分。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;两个背包问题都具有最优子结构性质。但我们可以使用贪心策略求解分数背包问题，而不能求解0-1背包问题。原因是小偷无法装满背包时，空闲空间降低了方案的有效每磅价值。当我们考虑是否装入某商品时，必须比较包含此商品的子问题的解与不包含它的子问题的解，然后才能做出选择。这将产生大量的重叠子问题，即需要使用动态规划算法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;赫夫曼编码&lt;/h3&gt;

&lt;p&gt;我们考虑一种 &lt;strong&gt;二进制字符编码&lt;/strong&gt;（或简称 &lt;strong&gt;编码&lt;/strong&gt;）的方法，每个字符用唯一二进制串表示，称为 &lt;strong&gt;码字&lt;/strong&gt;。 &lt;strong&gt;变长编码&lt;/strong&gt;（variable-length code）可以达到比 &lt;strong&gt;定长编码&lt;/strong&gt;好得多的压缩率，其思想是赋予高频字符短码字，赋予低频字符长码字。&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;前缀码&lt;/strong&gt;（prefix code）中，没有任何码字是其他码字的前缀。此时编码文件的开始码字是无歧义的。我们可以简单地识别出开始码字，将其转换回原字符，然后对编码文件剩余部分重复这种解码过程。解码过程可以用二叉树方便地表示。&lt;/p&gt;

&lt;p&gt;给定编码树 T，定义 $d_T(c)$ 为字母表 C 中字符 c 的叶结点的深度，即 c 的码字长度。定义 T 的 &lt;strong&gt;代价&lt;/strong&gt;：
$B(T) = \sum_{c\in C} c.freq \cdot d_T(c)$&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;赫夫曼编码&lt;/strong&gt;（Huffman code）是一种使用贪心算法构造的最优前缀码。C是n个字符的集合，C中的每个字符c有一个属性c.freq给出其出现频率。Q为以freq为关键字的最小优先队列。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;HUFFMAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allocate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//return the root of the tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假定 Q 使用最小二叉堆实现，则堆操作时间为 O(n)，HUFFMAN的运行时间为 O（n lg n)，如果将最小二叉堆换为 van Emde Boas 树，可以将运行时间将为 O(n lg lg n)。&lt;/p&gt;

&lt;h4&gt;HUFFMAN算法的正确性&lt;/h4&gt;

&lt;p&gt;引理1：令C为一个字母表，其中的每个字符c有一个频率c.freq。x和y为频率最低的两个字符。那么存在C的一个最优前缀码，x和y有相同的码字长度，且只有最有一个二进制位不同。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;叶结点都会成对出现。因为如果出现单独的叶结点，用该结点替换其父结点，可以得到更优的树。
不会有任何结点深于频率最低的x和y。因为假如存在这样一个z，那么调换x与z，可以得到更优的树。
所以x和y可以位于最低的那两个叶结点上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;引理2：令C为一个字母表，其中的每个字符c有一个频率c.freq。x和y为频率最低的两个字符。令 C&amp;#39; 为 C 去掉 x 和 y，加入 z(z.freq = x.freq+y.freq) 得到的字母表。T‘ 为 C’ 的一个最优前缀码对应的编码树。则将T&amp;#39; 的z替换为一个有x和y子节点的内部结点得到的树T，表示C的一个最优前缀码。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;因为 B(T) = B(T&amp;#39;) + x.freq + y.freq，这样的替换将产生确定的代价差额。故T&amp;#39;是最优的可以得到T是最优的（由引理1可以得到总是存在这样的替换）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;高级数据结构&lt;/h1&gt;

&lt;h2&gt;B树&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;B树类似于红黑树。他们在降低磁盘I/O操作数方面更好一些。因为B树的分支因子可以非常大，所以其高度要比红黑树小得多。&lt;/li&gt;
&lt;li&gt;B树是以一种自然的方式推广了的二叉搜索树。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;B树的定义&lt;/h3&gt;

&lt;p&gt;我们假定，任何与 &lt;strong&gt;关键字&lt;/strong&gt;相联系的 &lt;strong&gt;卫星数据&lt;/strong&gt;将与关键字一样存放在同一结点中，并随着关键字一起移动。一棵B树T是具有以下性质的有根树（根为T.root）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;B+树是B树的变种。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;每个结点x有如下属性：
a. x.n，表示结点x中的关键字个数
b. x.n个关键字以非降序排列
c. x.leaf，表示x是否为叶结点&lt;/li&gt;
&lt;li&gt;每个内部结点包含 x.n+1 个指针指向孩子们 c[i]&lt;/li&gt;
&lt;li&gt;x 中的关键字 x.key[i] 对子树中的关键字 k[i] 进行分割，n个关键字，n+1个子树&lt;/li&gt;
&lt;li&gt;每个叶结点有相同的深度，即树的高度h&lt;/li&gt;
&lt;li&gt;每个结点的关键字数由 &lt;strong&gt;最小度数&lt;/strong&gt;（minimum degree）t&amp;gt;=2控制：
a. 除根节点外，每个结点至少含 t-1 个关键字
b. 每个结点至多含 2t-1 个关键字&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果 n&amp;gt;=1，那么对任意一棵包含n个关键字、高度为h、最小度数t&amp;gt;=2 的B树T，有
$h\leq \log_t \frac{n+1}{2}$&lt;/p&gt;

&lt;h3&gt;B树上的基本操作&lt;/h3&gt;

&lt;h4&gt;搜索&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEARCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;循环所用时间为 O(t)，访问磁盘页数为 $O(\log_t n)$，总的CPU时间为 $O(t\log_t n)$。&lt;/p&gt;

&lt;h4&gt;创建&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DISK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CPU时间为 O(1)。&lt;/p&gt;

&lt;h4&gt;插入&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;分裂 B 树中的结点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;B-TREE-SPLIT-CHILD(x,i)&lt;/p&gt;

&lt;p&gt;输入：非满的内部结点 x，它的一个满的孩子x.c[i]的下标 i。
输出：将该子结点分裂为2个，并在 x 中添加关键字分开这两个孩子&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;沿树下行插入关键字&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;B-TREE-INSERT-NONFULL(x,k)&lt;/p&gt;

&lt;p&gt;输入：非满的树x，要插入的关键字k&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果x是叶结点，直接插入k&lt;/li&gt;
&lt;li&gt;如果x是内部结点，找到该关键字对应的子树&lt;/li&gt;
&lt;li&gt;如果该子树是满的，就分裂它&lt;/li&gt;
&lt;li&gt;在这个非满的子树上调用 B-TREE-INSERT-NONFULL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;构造非满根结点并插入关键字k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;B-TREE-INSERT(T,k)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果根节点不满，调用 B-TREE-INSERT-NONFULL(T.root,k)&lt;/li&gt;
&lt;li&gt;如果根结点是满的，将根结点置于新的根结点下，调用 B-TREE-SPLIT-CHILD 将原根结点分为两个孩子。调用调用 B-TREE-INSERT-NONFULL(T.root,k)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;从B树中删除关键字&lt;/h3&gt;

&lt;p&gt;当删除内部结点的关键字时，需要重新安排这个结点的孩子。当要删除的关键字的路径上的结点有最少的关键字树时还可能需要向上回溯。删除操作有以下几种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关键字k在叶结点x中：直接删除它&lt;/li&gt;
&lt;li&gt;关键字k在内部结点x中：
a. 如果k左边的子树关键字足够(&amp;gt;=t)，拿出最大的一个代替k
b. 如果k右边的子树关键字足够(&amp;gt;=t)，拿出最小的一个代替k
c. 既然左右子树关键字都不多于 t-1，将右子树与k合并入左子树，得到 2t-1 个关键字的新结点&lt;/li&gt;
&lt;li&gt;关键字k不在当前的内部结点x中：降至一个至少含t个关键字的结点，通过对x的某个合适的子结点进行递归。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;图算法&lt;/h1&gt;

&lt;h2&gt;基本的图算法&lt;/h2&gt;

&lt;h3&gt;图的表示&lt;/h3&gt;

&lt;p&gt;图 G=(V,E) 可以用两种标准表示方法表示。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;邻接链表&lt;/strong&gt;：由一个包含 |V| 条链表的数组 Adj 构成，每个结点有一条链表。
&amp;gt;&lt;strong&gt;权重图&lt;/strong&gt;：直接将边 (u,v) 的权重值 w(u,v) 存放在 u 的邻接链表里。
&amp;gt;邻接链表表示 &lt;strong&gt;稀疏图&lt;/strong&gt;（边的条数|E|远小于$|V|^2$）时非常紧凑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邻接矩阵&lt;/strong&gt;：由$|V|\times |V|$的矩阵 $A=(a_{ij})$ 表示：
$a_{ij}=
\begin{cases}
1,~if~(i,j)\in E\\
0,~other
\end{cases}
$
&amp;gt;邻接矩阵更适合表示 &lt;strong&gt;稠密图&lt;/strong&gt;、需要快速判断任意两个点是否相连的图。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;广度优先搜索&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;广度优先搜索&lt;/strong&gt;是最简单的图搜索算法之一，也是许多重要的图算法的原型。算法需要发现所有距离源点s为k的结点之后，才会发现距离源点s为k+1的结点。&lt;/p&gt;

&lt;p&gt;u.color 记录结点u的颜色，u.pi 记录u的前驱结点，u.d 记录广度优先搜索计算出的与源点s的距离。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;BFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRAY&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ENQUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEQUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRAY&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ENQUEUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扫描邻接链表的总时间为 O(E)，初始化成本为 O(V)，故BFS的总运行时间为 O(V+E)。&lt;/p&gt;

&lt;h4&gt;最短路径&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;最短路径距离&lt;/strong&gt; $\delta(s,v)$为从源点s到结点v之间所有路径里面最少的边数。称从源点s到结点v的长度为$\delta(s,v)$的路径为 &lt;strong&gt;最短路径&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 给定有向图或无向图G=(V,E)，任意结点$s\in V$，则对于任意边 $(u,v) \in E$，$\delta(s,v)\leq \delta(s,u)+1$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 给定有向图或无向图G=(V,E)，任意结点$v\in V$，$v.d \geq \delta(s,v)$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 设BFS的队列Q为 &lt;v1,v2,...,vr&gt;，则 $v_r.d \leq v_1.d +1$，并且对于 i=1,2,...,r-1，$v_i.d \leq v_{i+1}.d$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;即队列中前面的 d 不大于后面的，且首位差距不超过 1。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 给定有向图或无向图G=(V,E)，BFS将发现所有从源点s可到达的结点v，且对任意 $v\in V$，v.d = \delta(s,v)$。s 到 v.pi 的最短路径加上边(v.pi,v) 为一条 s 到 v的最短路径。&lt;/p&gt;

&lt;h4&gt;广度优先树&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;前驱子图&lt;/strong&gt;：$G_\pi  = (V_\pi, E_\pi)$，其中 $V_\pi = { v\in V: v.\pi \neq NIL } \cup { s }$，$E_\pi = { (v.\pi,v): v \in V_\pi - { s } }$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 给定有向图或无向图G=(V,E)，BFS过程建造出来的 pi 属性使得前驱子图 $G_\pi  = (V_\pi, E_\pi)$ 称为一棵广度优先树。&lt;/p&gt;

&lt;p&gt;打印广度优先树&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;no path from&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;exists&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;深度优先搜索&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;深度优先搜索的前驱子图&lt;/strong&gt;：$G_\pi  = (V, E_\pi)$，其中 $E_\pi = { (v.\pi,v): v \in V~and~v.\pi \neq NIL}$。&lt;/p&gt;

&lt;p&gt;深度优先搜索会在每个结点盖上两个 &lt;strong&gt;时间戳&lt;/strong&gt;：第一个时间戳 v.d 记录v第一次被发现的时间（涂上灰色）；第二个时间戳 v.f 记录完成对 v 的邻接链表扫描的时间（涂上黑色）。&lt;/p&gt;

&lt;p&gt;DFS输入G是无向图或有向图，time为全局变量用来计算时间戳。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRAY&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ajd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化时间为 $\Theta(V)$，遍历邻接链表时间为 $\Theta(E)$，故算法运行时间为 $\Theta(V+E)$。&lt;/p&gt;

&lt;h4&gt;深度优先搜索的性质&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 在对有向图或无向图 G=(V,E) 进行DFS时，对任意结点 u 和 v：以下三种情况只有一种成立：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;[u.d,u.f]与[v.d,v.f]完全分离：深度优先森林中，u与v互相不为对方后代&lt;/li&gt;
&lt;li&gt;[u.d,u.f]完全包含于[v.d,v.f]：深度优先森林中，u是v的后代&lt;/li&gt;
&lt;li&gt;与2相反的情况&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt; 在深度优先森林中，v是u的真后代当且仅当 u.d&amp;lt;v.d&amp;lt;v.f&amp;lt;u.f。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;白色路径定理&lt;/strong&gt;：在G的深度优先森林中，v是u的后代当且仅当发现u时，存在u到v的由全部由白色结点构成的路径。&lt;/p&gt;

&lt;h4&gt;边的分类&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;树边&lt;/strong&gt;：深度优先森林 $G_\pi$ 的边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后向边&lt;/strong&gt;：结点u连接到所在深度优先树中一个祖先结点v的边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前向边&lt;/strong&gt;：结点u连接到所在深度优先树中一个后代结点v的边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;横向变&lt;/strong&gt;：其他所有的边。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一次探索边 (u,v) 时，结点v的颜色会反应边的信息：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;v 为白色：(u,v) 为树边&lt;/li&gt;
&lt;li&gt;v 为灰色：(u,v) 为后向边&lt;/li&gt;
&lt;li&gt;v 为白色：(u,v) 为前向边或横向边&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 对无向图G进行DFS时，每条边要么是树边，要么是后向边&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有向图中的横向边在无向图中成为树边或后向边。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;拓扑排序&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;拓扑排序&lt;/strong&gt;是G中所有结点的一种线性排序，满足：如果G包含边(u,v)，则u在拓扑排序中处于结点v的前面。&lt;/p&gt;

&lt;p&gt;如下算法完成对有向无环图的拓扑排序：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TOPOLOGICAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 有向图G是无环的当且仅当对其DFS不产生后向边。&lt;/p&gt;

&lt;h3&gt;强连通分量&lt;/h3&gt;

&lt;p&gt;有向图G=(V,E)的 &lt;strong&gt;强连通分量&lt;/strong&gt;为一个最大结点集合 $C \subset V$，对于该集合中任意两点可以互相到达。&lt;/p&gt;

&lt;p&gt;定义图G=(V,E)的转置为$G^T=(V,E^T)$，其中 $E^T = { (u,v): (v,u) \in E }$。下面的线性时间（$\Theta(V+E)$）算法使用两次DFS计算G的强连通分量。分别运行在G和$G^T$上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;STRONGLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONNECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMPONENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decreasing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strongly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;对G的DFS建立了深度优先森林，计算 $G^T$ 将该森林中所有边反转，对 $G^T$ 的DFS选择从上述森林的根结点出发，尝试到达原来的叶结点，能走通的结点加入到强连通分量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; C和C&amp;#39;为G的两个不同的强连通分量，$u,v\in C$，$u‘,v’\in C‘$。如果G包含u到u’的路径，则不可能包含 v&amp;#39; 到 u&amp;#39; 的路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; C和C&amp;#39;为G的两个不同的强连通分量，如果存在边 $(u,v)\in E$，$u\in C$，$v\in C&amp;#39;$，则 f(C)&amp;gt;f(C&amp;#39;)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;定义d(U)和f(U)为U中所有结点最早和最晚发现时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt; C和C&amp;#39;为G的两个不同的强连通分量，如果存在边 $(u,v)\in E^T$，$u\in C$，$v\in C&amp;#39;$，则 f(C)&amp;lt;f(C&amp;#39;)。&lt;/p&gt;

&lt;h2&gt;最小生成树&lt;/h2&gt;

&lt;p&gt;对于连同无向图G=(V,E)，我们希望找到一个五环子集 $T\subsetE$，既能将所有结点连接起来，又具有最小的权重（$w(T)=\sum_{(u,v)\in T}w(u,v)$），由于T无环，T必然是一棵树，称为图G的 &lt;strong&gt;生成树&lt;/strong&gt;，求取该生成树的问题为 &lt;strong&gt;最小生成树问题&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;最小生成树的形成&lt;/h3&gt;

&lt;p&gt;在每一时刻生长最小生成树的一条边，并维护如下循环不变式：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在每次循环之前，边集合A是某棵最小生成树的一个子集。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样不破坏循环不变式的的边(u,v)称为集合A的 &lt;strong&gt;安全边&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;GENERIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spanning&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无向图G=(V,E)的一个 &lt;strong&gt;切割&lt;/strong&gt;(S,V-S)是集合V的一个划分。如果一条边 $(u,v)\in E$ 的一个端点位于S，另一个端点位于V-S，则称该边 &lt;strong&gt;横跨&lt;/strong&gt;该切割。如果集合A中不存在横跨该切割的边，则称该切割 &lt;strong&gt;尊重&lt;/strong&gt;集合A。在横跨一个切割的所有边中，权重最小的边称为 &lt;strong&gt;轻量级边&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 设G=(V,E)是一个在边E上定义了实数权重函w的连通无向图。A为E的子集，且在G的某棵最小生成树中。(S,V-S)为尊重集合A的任意一个切割。(u,v)是横跨该切割的一条轻量级边。则边(u,v)对于集合A是安全的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假设(u.v)不在最小生成树T中，因u v必然在树中相连，故(u,v)与树中两者的连线构成环。至少有两边横跨该切割，一边为(u,v)，设另一边为(x,y)。考虑新的一棵生成树：T&amp;#39;=T-{(x,y)}+{(u,v)}，因(u,v)是轻量级边，故w(T&amp;#39;)不大于w(T)，即T&amp;#39;也是最小生成树。显然(x,y)不在A中，于是A与(u,v)都在T&amp;#39;中，即(u,v)对于集合A是安全的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt; 设G=(V,E)是一个在边E上定义了实数权重函w的连通无向图。A为E的子集，且在G的某棵最小生成树中。设 $C=(V_C,E_C)$为森林 $G_A=(V,A)$ 中的一棵树。如果边(u,v)是连接C 和 $G_A$ 中其他树的一条轻量级边，则该边对于A是安全的。&lt;/p&gt;

&lt;h3&gt;Kruskal算法和Prim算法&lt;/h3&gt;

&lt;h4&gt;Kruskal算法&lt;/h4&gt;

&lt;p&gt;在所有连接森林中两棵不同树的边里面，找到权重最小的加入最小生成树。Kruskal算法属于贪心算法。&lt;/p&gt;

&lt;p&gt;FIND-SET(u)用来返回包含u的集合的代表元素，UNION过程对两棵树进行合并，判断FIND-SET(u)==FIND-SET(v)可知两点是否在同一集合。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KRUSKAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MAKE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//each tree contains one vertex&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nondecreasing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nondecreasing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UNION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;共有O(E)个FIND-SET和UNION操作，|V|个MAKE-SET操作，故总运行时间为 O(E lgV + V lgV) = O(E lgE)（对于连通图：$E \geq V-1$）。注意到 $|E|&amp;lt;|V|^2$，运行时间为O(E lgV)。&lt;/p&gt;

&lt;h4&gt;Prim 算法&lt;/h4&gt;

&lt;p&gt;集合A中的边总是构成一棵树，每次选择一条轻量级边加入A。Prim算法属于贪心算法。&lt;/p&gt;

&lt;p&gt;所有不在A中的结点存放于以key为权值的最小优先队列Q中。对每一个结点v，v.key保存连接v和树中结点的所有边中最小边的权重。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//对于任意指定的根结点r，都可生成拥有同样边集合的树&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;每次循环结束后，保证了下一次循环中EXTRACT-MIN得到的u都是最小生成树中的结点（因为本次循环中(u,v)为轻量级边）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;建造堆的时间为 O(V)；EXTRACT-MIN的时间为 O(lg V)，遍历结点循环次数为 |V|；修改key用到的DECREASE-KEY在二叉最小堆的时间为 O(lg V)，在斐波那契堆的时间为 O(1)，遍历边循环次数为|E|。故算法MST-PRIM的运行时间为 O(V + V lgV + E lgV)=O(E lgV)（最小二叉堆实现）或者 O(E + V lgV)（斐波那契堆实现）。&lt;/p&gt;

&lt;h2&gt;单源最短路径&lt;/h2&gt;

&lt;p&gt;在 &lt;strong&gt;最短路径问题&lt;/strong&gt;中，给定一个带权重的有向图G=(V,E)和权重函数 $\omega: E \to \vec{\bm{R}}$，该函数将每条边映射到实数值的权重。
图中一条路径p的 &lt;strong&gt;权重&lt;/strong&gt; w(p) 是构成该路径的所有边的权重之和：$\omega(p)=\sum_{i=1}^k \omega(v_{i-1},v_i)$。
从结点u到结点 v的 &lt;strong&gt;最短路径权重&lt;/strong&gt; $\delta(u,v) = \begin{cases}\min{\omega(p):u\to v},\quad if~there~is~a~path~from~u~to~v}\\ \infty,\quad other\end{cases}$
&lt;strong&gt;最短路径的最优子结构性质&lt;/strong&gt;：两个结点之间的一条最短路径包含着其他的最短路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最短路径问题的几个变体&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单源最短路径问题&lt;/strong&gt;：给定一个图G=(V,E)，找到从给定 &lt;strong&gt;源点&lt;/strong&gt; $s\inV $ 到每个结点 $v\in V$ 的最短路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单目的地最短路径问题&lt;/strong&gt;：找到从每个结点 v 到给定 &lt;strong&gt;目的地&lt;/strong&gt;结点 t 的最短路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单结点对最短路径问题&lt;/strong&gt;：找到给定结点 u 到给定结点 v 的最短路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有结点对最短路径问题&lt;/strong&gt;：对于每对结点 u 和 v，找到从结点 u 到结点 v 的最短路径。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（最短路径的子路径也是最短路径）给定带权重的有向图G=(V,E)和权重函数 $\omega: E \to \vec{\bm{R}}$。设 $p=&lt;v_0,v_1,..,v_k&gt;$ 为从结点 v0 到结点 vk 的一条最短路径，并且对于任意 i 和 j，$0\leq i \leq j\leq k$，设 $p_{ij} = &lt;v_i,v_{i+1},...,v_j&gt;$ 为路径p中从结点 vi 到结点 vj 的子路径。那么 $p_{ij}$ 是从结点 vi 到结点 vj 的一条最短路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;负权重的边&lt;/strong&gt;
如果图G不包含从源点s可到达的权重为负的环路，则对所有结点，最短路径权重都有精确定义；如果从结点s到结点v的某条路经上存在权重为负的环路，我们定义$\delta(s,v)=-\infty$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;环路&lt;/strong&gt;
最短路径不能包含权重为正值的环路。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最短路径表示&lt;/strong&gt;
&lt;strong&gt;前驱子图&lt;/strong&gt; $G_\pi = (V_\pi, E_\pi)$，其中 $V_\pi = { v\in V: v.\pi \neq \rm{NIL} } \cup {s}$，$V_\pi = { (v.\pi,V) \in E: v\in V_\pi - {s}}$。
算法终止时，$G_\pi$是一棵“最短路径树”：有根结点的树，包括了从源结点 s 到每个可以从 s 到达的结点的一条最短路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;松弛操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对每个结点维护一个属性 v.d，记录从源结点 s 到结点 v 的最短路径权重的上界。称为 &lt;strong&gt;最短路径估计&lt;/strong&gt;。
使用 $\Theta(V)$ 运行时间的算法对最短路径估计和前驱结点初始化：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SINGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对一条边(u,v)的 &lt;strong&gt;松弛&lt;/strong&gt;操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;RELAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Bellman-Ford算法&lt;/h3&gt;

&lt;p&gt;Bellman-Ford算法解决的是一般情况下的单源最短路径问题。该算法返回TRUE当且仅当输入图不包含可以从源结点到达的权重为负值的环路。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;BELLMAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SINGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RELAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总运行时间为 O(VE)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt; 设G=(V,E)为一个带权重的源结点为s的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$。图G不包含从 s 可以到达的权重为负值的环路，则对于所有结点 v，存在一条从 s 到 v 的路径当且仅当 BELLMAN-FRD 算法终止时有 $v.d&amp;lt;\infty$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt;（Bellman-Ford算法的正确性）设BELLMAN-FORD算法运行在一带权重的源结点为 s 的有向图 G=(V,E) 上，该图的权重函数为 $\omega: E \to \vec{\bm{R}}$。如果图G不包含从 s 可以到达的权重为负值的环路，则算法返回 TRUE，且对于所有结点 v，前驱子图 $G_\pi$ 是一棵根为 s 的最短路径树。如果G包含一条从 s 可以到达的权重为负值的环路，则算法返回FALSE。&lt;/p&gt;

&lt;h3&gt;有向无环图中的单源最短路径问题&lt;/h3&gt;

&lt;p&gt;根据结点的拓扑排序次序来对带权重的有向无环图 G=(V,E) 进行边的松弛操作，便可以在 $\Theta(V+E)$ 时间内计算出从单个源结点到所有结点之间的最短路径。每次对一个结点进行处理时，我们队从该结点发出的所有边进行松弛操作。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;topologically&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SINGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topologically&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RELAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算法的总运行时间为$\Theta(V+E)$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 如果带权重无环路的有向图G=(V,E)有一个源结点s，则在算法DAG-SHORTEST-PATHS终止时，对于所有结点v，我们有 $v.d=\delta(s,v)$，且前驱子图 $G_\pi$ 是一棵最短路径树。&lt;/p&gt;

&lt;h3&gt;Dijkstra 算法&lt;/h3&gt;

&lt;p&gt;Dijkstra算法解决的是带权重的有向图上单源最短路径问题，该算法要求所有边的权重都为非负值。Dijkstra 算法在运行过程中维持的关键信息是一组结点集合S：从源结点 s 到该集合中每个结点之间的最短路径已经被找到。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;DIJKSTRA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SINGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RELAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt;（Dijkstra算法的正确性）Dijkstra算法运行在带权重的有向图G=(V,E)时，如果所有权重为非负值，则在算法终止时，对于所有结点 u，有 $u.d=\delta(s,u)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;可通过循环不变式证明：4~8行的while语句每次循环开始前，对于每个结点 $v \in S$，有 $v.d = \delta(s,v)$。
Q中最小结点所有连接到S的路径已被探测过，且pi已经标记为最短路径上的前驱结点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt; 如果在带权重的有向图G=(V,E)上运行Dijkstra算法，其中的权重皆为非负值，源点为s，则在算法终止时，前驱子图 $G_\pi$ 是一棵根结点为 s 的最短路径树。&lt;/p&gt;

&lt;p&gt;Dijkstra算法的时间复杂度同最短路径的 Prim 算法，依赖于最小优先队列的实现：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数组实现：$O(V^2+E)=O(V^2)$&lt;/li&gt;
&lt;li&gt;最小二叉堆实现：$O((V+E) \lg V)=O(E\lg V)$&lt;/li&gt;
&lt;li&gt;斐波那契堆实现：$O(V\lg V + E)$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;差分约束和最短路径&lt;/h3&gt;

&lt;h4&gt;线性规划&lt;/h4&gt;

&lt;p&gt;寻找一个 n 维向量 x，使得在由 $Ax\leq b$（A为$m \times n$矩阵，b为m维向量）给定的m个约束条件下优化目标函数 $\sum^n_{i=1} c_i x_i$（c为n维向量，“优化”通常是指取值最大）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有时我们并不关注目标函数，而是仅仅希望找到一个 &lt;strong&gt;可行解&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;差分约束系统&lt;/h4&gt;

&lt;p&gt;在一个 &lt;strong&gt;差分约束系统&lt;/strong&gt;中，线性规划矩阵A的每一行只包括一个1和一个-1，其他项为0。因此 $Ax \leq b$ 所给出的约束条件变为 m 个涉及 n 个变量的 &lt;strong&gt;差额限制条件&lt;/strong&gt;。其中每个条件可以表示为：$x_j-x_i \leq b_k$。这里 $1 \leq i,j \leq n,~i \neq j,~1\leq k \leq m$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 设向量 $x = (x_1,x_2,...,x_n)$ 为差分约束系统 $Ax \leq b$ 的一个可行解，设 d 为任意常数，则 x+d 也睡该差分约束系统的一个解。&lt;/p&gt;

&lt;p&gt;给定差分约束系统 $Ax \leq b$，其对应的 &lt;strong&gt;约束图&lt;/strong&gt;是一个带权重的有向图 G=(V,E)，其中：
$V={ v_0,v_1,...,v_n }$
$E = { (v_i,v_j): x_j-x_i \leq b_k~is~a~constraint  } \cup { (v_0,v_1),(v_0,v_2),...,(v_0,v_n) }$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定理&lt;/strong&gt; 给定差分约束系统 $Ax \leq b$，设G=(V,E)是该系统对应的约束图，如果G不包含权重为负的环路，则
$x = (\delta(v_0,v_1),\delta(v_0,v_2),...,\delta(v_0,v_n))$
为该系统的一个可行解。如果图G包含权重为负值的环路，该系统没有可行解。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对任意一条边(vi,vj)，根据三角不等式，$\delta(v_0,j_j) \leq \delta(v_0,v_i) + \omega(v_i,v_j)$，即 $\delta(v_0,v_j) - \delta(v_0,v_i) \leq w(v_i,v_j)$，即 $x_j - x_i \leq b_k$。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;最短路径性质&lt;/h3&gt;

&lt;h4&gt;三角不等式性质&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（三角不等式）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，源点为s。则对于所有边 $(u,v)\in E$，我们有：
$\delta(s,v) \leq \delta(s,u) + \omega(u,v)$&lt;/p&gt;

&lt;h4&gt;最短路径估计值的松弛效果&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（上界性质）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，源点为s。该图由算法 INITIALIZE-SINGLE-SOURCE(G,s)执行初始化。那么对于所有结点 $v \in V, v.d \geq \delta(s,v)$，并且该不变式在对图G的边进行任何次序的松弛过程中保持成立。而且一旦v.d取得其下界将不再变化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推论&lt;/strong&gt;（非路径性质）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，假定从源结点 s 到给定结点 v 之间不存在路径，则在该图由算法 INITIALIZE-SINGLE-SOURCE(G,s)进行初始化后，我们有 $v.d = \delta(s,v) = \infty$，并且该等式一直维持到G的所有松弛操作结束。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$。那么对边 $(u,v) \in E$ 进行 RELAX(u,v,w)后，有 $v.d \deq u.d + \omega(u,v)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这即是松弛操作所做的工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（收敛性质）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，s为某个源点，$s \to u \to v$ 为G中的一条最短路径。假定G由INITIALIZE-SINGLE-SOURCE(G,s)初始化，并在这之后做了一系列松弛操作，其中包括对边(u,v)的松弛操作 RELAX(u,v,w)。如果在对边(u,v)进行松弛操作前的任意时刻有 $u.d = \delta(s,u)$，则在该松弛操作之后的所有时刻有 $v.d = \delta(s,v)$。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（路径松弛性质）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，s为某个源点，考虑从s到vk的任意一条最短路径$p=&lt;v_0,v_1,...,v_k&gt;$。如果G由INITIALIZE-SINGLE-SOURCE(G,s)进行初始化，并在这之后进行了一系列的松弛操作，包括对 $(v_0,v_1),(v_1,v_2),...,(v_{k-1},v_k)$ 按照所列次序而进行的松弛操作，则在这些操作后我们有 $v_k.d =  \delta(s,v_k)$，并且该等式一直保持成立。该性质的成立与其他边的松弛操作及次序无关。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用归纳法证明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;松弛操作与最短路径树&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt; 设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，s为某个源点，假定图中不包含从s可以到达的权重为负值的环路，则在图G由INITIALIZE-SINGLE-SOURCE(G,s)进行初始化之后，前驱子图 $G_\pi$ 形成根为s的有根树，并且对任何对G的边进行的任意松弛操作都将维持该性质不变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;引理&lt;/strong&gt;（前驱子图性质）设G=(V,E)为一个带权重的有向图，其权重函数为 $\omega: E \to \vec{\bm{R}}$，s为某个源点，假定图中不包含从s可以到达的权重为负值的环路，由INITIALIZE-SINGLE-SOURCE(G,s)对G进行初始化，然后对G的边进行任意次序的松弛操作。该松弛操作序列将针对所有结点生成 $v.d = \delta(s,v)$，则前驱子图 $G_\pi$ 形成根为s的最短路径树。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;可用 cut &amp;amp; paste 证明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;所有结点对的最短路径问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;前驱结点矩阵&lt;/strong&gt; $\Pi = (\pi_{ij})$，其中 $\pi_{ij}$ 在 i=j 或 i到j不存在路径时为 NIL，其他情况为 i 到 j 最短路径上j的前驱结点。对每个结点 i，定义图G对于结点 i 的 &lt;strong&gt;前驱子图&lt;/strong&gt;为 $G_{\pi,i} = (V_{\pi,i}, E_{\pi,i})$，其中
$V_{\pi,i} = { j \in V: \pi_{i,j} \neq NIL} \cup { i },\quad E_{\pi,i} = { (\pi_{ij},j): j \in V_{\pi,i} - {i}}$
如果 $G_{\pi,i}$是一棵最短路径树，如下算法将打印 i 到 j 的一条最短路径。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAIRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;no path from&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;exists&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAIRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;最短路径和矩阵算法&lt;/h3&gt;

&lt;h4&gt;递归解&lt;/h4&gt;

&lt;p&gt;定义 $l_{ij}^{(m)}$ 为 i 到 j 的至多包含 m 条边的所有路径中最小的权重，则：
$l_{ij}^{(0)} = \begin{cases}
0 \quad if~i=j\\
\infty \quad if~i\neq j
\end{cases}$&lt;/p&gt;

&lt;p&gt;$l_{ij}^{(m)} = \min_{1\leq k \leq n}{ l_{ik}^{(m-1)} + \omega_{kj} }$，其中 $\omega_{jj} = 0$&lt;/p&gt;

&lt;p&gt;而最短路径由下式给出：
$\delta(i,j) = l_{ij}^{(n-1)}$&lt;/p&gt;

&lt;h4&gt;算法实现&lt;/h4&gt;

&lt;p&gt;设 $L^{(m)} = (l^{(m)}_{ij})$，则 $L^{(1)} = (\omega_{ij})$。下面伪代码程序可以在给定 $W=(\Omega_{ij})$和 $L^{(m-1)}$ 的情况下，计算 $L^{(m)}$（将最短路径扩展一条边）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;EXTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法运行时间为 $\Theta(n^3)$。&lt;/p&gt;

&lt;p&gt;下面伪代码程序在 $\Theta(n^4)$ 时间内计算出 $L^{(n-1)}$：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;SLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAIRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Lm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;矩阵转换&lt;/h4&gt;

&lt;p&gt;注意到递归式相似于矩阵相乘的规则：$c_{ij} = \sum_{k=1}^n a_{ik} \cdot b_{kj}$。且算法结构与 SQUARE-MATRIX-MULTIPLY(A,B) 一致。可以使用矩阵乘法的交换性改进算法性能。仅用 $\lceil \lg (n-1) \rceil$ 次矩阵乘积计算矩阵 $L^{(n-1)}$。计算方法如下：&lt;/p&gt;

&lt;p&gt;$L^{(1)} = W$
$L^{(2)} = L^{(1)} \cdot L^{(1)}$
$L^{(4)} = L^{(2)} \cdot L^{(2)}$
$\cdot \cdot \cdot$&lt;/p&gt;

&lt;p&gt;下面过程使用 &lt;strong&gt;重复平方&lt;/strong&gt;技术来计算上述矩阵序列。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;FASTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAIRS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHORTEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATHS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算法运行时间为 $\Theta(n^3 \lg n)$&lt;/p&gt;

&lt;h3&gt;Floyd-Warshall 算法&lt;/h3&gt;

&lt;h4&gt;递归解&lt;/h4&gt;

&lt;p&gt;设 $d_{ij}^{(k)}$ 为 i 到 j 的中间结点都在 {1,2,...,k} 的最短路径的权重。显然 $d_{ij}^{(0)}=\omega_{ij}$，
$d_{ij}^{(k)} = \begin{cases}
\omega_{ij} \quad k=0\\
\min\left(d_{ij}^{(k-1)},d_{ik}^{(k-1)} + d_{kj}^{(k-1)}\right) \quad k \geq 1
\end{cases}$&lt;/p&gt;

&lt;p&gt;矩阵 $D^{(n)} = (d_{ij}^{(n)})$ 给出了 $\delta(i,j) = d_{ij}^{(n)}$。&lt;/p&gt;

&lt;h4&gt;算法实现&lt;/h4&gt;

&lt;p&gt;Floyd-Warshalll 算法将所有点编号，逐个加入结果矩阵。输入为 $n\times n$ 的矩阵 W，算法返回最短路径权重矩阵 $D^{(n)}$。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;FLOYD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WARSHALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算法运行时间为 $\Theta(n^3)$。&lt;/p&gt;

&lt;h4&gt;构建最短路径&lt;/h4&gt;

&lt;p&gt;我们可以在计算矩阵 $D^{(k)}$ 的同时计算前驱矩阵 $\Pi$，下面给出 $\pi_{ij}^{(k)}$ 的递归式：&lt;/p&gt;

&lt;p&gt;$\pi_{ij}^{(0)} = \begin{cases}
NIL \quad if~i=j ~ or ~ \omega_{ij}=\infty \\
i \quad if~i \neq j ~ and ~ \omega_{ij}&amp;lt;\infty
\end{cases}$&lt;/p&gt;

&lt;p&gt;$\pi_{ij}^{(k)} = \begin{cases}
\pi_{ij}^{(k-1)} \quad  if~d_{ij}^{(k-1)} \leq d_{ik}^{(k-1)} + d_{kj}^{(k-1)}\\
\pi_{kj}^{(k-1)} \quad if~d_{ij}^{(k-1)} &amp;gt; d_{ik}^{(k-1)} + d_{kj}^{(k-1)}
\end{cases}$&lt;/p&gt;

&lt;h4&gt;有向图的传递闭包&lt;/h4&gt;

&lt;p&gt;定义图G的 &lt;strong&gt;传递闭包&lt;/strong&gt;为图 $G^* = (V, E^*)$，其中 $E^* = { (i,j): \quad if there is a path from i to j in G }$。有两种方法可以求得G的传递闭包：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给E中所有边赋值1，运行 Floyd-Warshall 算法。时间复杂度为 $\Theta(n^3)$。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果存在 i 到 j 的路径，则 $d_{ij} &amp;lt; n$，否则，$d_{ij} = \infty$。时间复杂度为 $\Theta(n^3)$。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们定义：如果图G中 i 到 j 的路径的中间结点都取自 {1,2,...,k}，则 $t_{ij}^{(k)} = 1$；否则为 0 。
构建传递闭包 $G^*$ 的方法为：将(i,j) 置于 $E^*$ 当且仅当 $t_{ij}^{(n)} = 1$。其递归定义如下：
$t_{ij}^{(0)} = \begin{cases}
0 \quad if~i\neq j~and~(i,j)\in E\\
1 \quad if~i=j~or~(i,j) \in E
\end{cases}$
$t_{ij}^{(k)} = t_{ij}^{(k-1)} \lor ( t_{ik}^{(k-1)} \land t_{kj}^{(k-1)}) \quad if~k \geq 1$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;即使用逻辑或操作（$\lor$）和逻辑与操作（$\land$）替换 Floyd-Warshall 算法中的 min 和 +。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如 Floyd-Warshall 算法一样，我们以 k 递增的次序来计算矩阵 $T^{(k)} = (t_{ij}^{(k)})$。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TRANSITIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;用于稀疏图的 Johnson 算法&lt;/h3&gt;

&lt;p&gt;Johnson算法使用的技术成为 &lt;strong&gt;重新赋予权重&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果图G的所有边权重为非负值，对每个结点运行一次 Dijkstra 算法得到最短路径。使用斐波那契堆时的算法运行时间为 $V^2 \lg V + VE$。&lt;/li&gt;
&lt;li&gt;如果图G包含权重为负的边，但没有负值环路，那么只有计算出一组非负权重值，然后使用同样的方法。
&amp;gt; 新赋予的权重应满足下面两个性质：
&amp;gt; 1. 对所有结点对，其最短路径不能因权重的变化而变化。
&amp;gt; 2. 对所有边，新权重 $w&amp;#39;(u,v)$ 非负。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;定义新的权重&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义 $w&amp;#39;(u,v) = w(u,v) + h(u) - h(v)$，则路径权重 $w&amp;#39;(p) = \sum_{i=1}^k w&amp;#39;(v_{i-1}, v_i) = w(p) + h(v_0) - h(v_k)$。即对于同样的结点对，各路径权重增加一个常数，其大小关系不发生变化。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义图 G&amp;#39; = (V&amp;#39;,E&amp;#39;)，其中 $V&amp;#39;=V \cup {s}$（s 为新结点），$E&amp;#39; = E \cup { (s,v):~v\in V }$。对所有结点 $v \in V&amp;#39;$，定义 $h(v) = \delta(s,v)$，则根据三角不等式 $h(v)\leq h(u)+w(u,v)$，即新的权重 $w&amp;#39;(u,v) = w(u,v)+h(u)-h(v) \geq 0$。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;算法实现&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;JOHNSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BELLMAN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;the input graph contains a negative-weight cycle&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bellman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ford&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nXn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIJKSTRA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//recover the weight&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用斐波那契堆实现 Dijkstra 算法的最小优先队列，则 Johnson 算法的运行时间为 $O(V^2 \lg V + VE)$；使用二叉最小堆实现则运行时间为 $O(VE \lg V)$。在稀疏图情况下，仍比 Floyd-Warshall 算法的时间表现好。&lt;/p&gt;
</description>
				<pubDate>Mon, 28 Oct 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/%E7%AC%94%E8%AE%B0/introduction-to-algorithms.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E7%AC%94%E8%AE%B0/introduction-to-algorithms.html</guid>
			</item>
		
			<item>
				<title>计算机网络</title>
				<description>&lt;h1&gt;概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;分布式系统 
对于用户是一个统一的整体，只有一个模型或泛型，由操作系统之上的中间件负责实现。 
eg. 万维网(world wide web)&lt;/li&gt;
&lt;li&gt;计算机网络 
大量独立的计算机互相连接起来共同完成计算任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;计算机网络的应用&lt;/h2&gt;

&lt;h3&gt;商业应用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;资源共享 
地理位置束缚、客户-服务器模型&lt;/li&gt;
&lt;li&gt;通信媒介 
电子邮件、电子商务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;家庭应用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;即时消息、聊天室 &lt;/li&gt;
&lt;li&gt;对等通信(p2p)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;移动用户&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PDA（personal digital assistants）&lt;/li&gt;
&lt;li&gt;固定无线、移动无线&lt;/li&gt;
&lt;li&gt;WAP 1.0（wireless application protocol）：针对小屏幕简化的Web页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;网络硬件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;广播网络：广播、多播&lt;/li&gt;
&lt;li&gt;点到点：单播&lt;/li&gt;
&lt;li&gt;个人区域网络-&amp;gt;局域网-&amp;gt;城域网-&amp;gt;广域网-&amp;gt;Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;局域网 LAN（local area network）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;总线型网络：以太网 IEEE 802.3&lt;/li&gt;
&lt;li&gt;环形网络：IBM令牌环 IEEE 802.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;城域网 MAN（metropolitan area network）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;有线电视 &lt;/li&gt;
&lt;li&gt;集中控制：头端&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;广域网 WAN（wide area network）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;主机、交换单元、通信子网、传输线、路由器 &lt;/li&gt;
&lt;li&gt;存储转发（分组交换）、路由算法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;无线网络&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;系统互联：计算机外部设备 eg. 蓝牙&lt;/li&gt;
&lt;li&gt;无线 LAN：IEEE 802.11&lt;/li&gt;
&lt;li&gt;无线 WAN：蜂窝电话、IEEE 802.16&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;互联网&lt;/h3&gt;

&lt;p&gt;通过网关互相连接起来的网络&lt;/p&gt;

&lt;h2&gt;网络软件&lt;/h2&gt;

&lt;h3&gt;协议层次&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;协议：通信双方关于如何进行通信的约定&lt;/li&gt;
&lt;li&gt;对等体：不同机器上包含对应层的实体&lt;/li&gt;
&lt;li&gt;接口：定义了下层向上层提供哪些原语操作和服务&lt;/li&gt;
&lt;li&gt;网络体系结构：层和协议的集合&lt;/li&gt;
&lt;li&gt;协议栈：一个特定的系统所使用的一组协议&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;各层的设计问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;编址机制&lt;/li&gt;
&lt;li&gt;错误控制&lt;/li&gt;
&lt;li&gt;流控制：传送速率&lt;/li&gt;
&lt;li&gt;多路复用、多路解复用：为多个上层会话使用同一个连接&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;其他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;面向连接与无连接的服务&lt;/li&gt;
&lt;li&gt;服务：某一层向它的上一层提供的一组原语&lt;/li&gt;
&lt;li&gt;协议：一组规则，规定同一层对等实体间交换的信息的格式和含义&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;参考模型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/space/2013/0519/012337_5jas_698768.gif&quot; alt=&quot;MODEL&quot;&gt;&lt;/p&gt;

&lt;h2&gt;网络实例&lt;/h2&gt;

&lt;h3&gt;Internet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ARPANET：advanced research project agency，比电话网络更好的命令和控制系统。&lt;/li&gt;
&lt;li&gt;NSFNET：national science foundation，使用ARPANET的硬件；首次使用TCP/IP协议。&lt;/li&gt;
&lt;li&gt;Internet：客户-&amp;gt;POP（point of presence，汇接点）-&amp;gt;区域ISP（internet service provider，服务提供商）-&amp;gt;骨干网-&amp;gt;NAP（network access point）-&amp;gt;服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;面向连接的网络：X.25、帧中继、ATM&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;X.25：第一个公共的数据网络&lt;/li&gt;
&lt;li&gt;帧中继：无错误控制、无流控制&lt;/li&gt;
&lt;li&gt;ATM（asynchronous transfer mode，异步传输模式）虚电路：155Mbps、622Mbps&lt;/li&gt;
&lt;li&gt;ATM 参考模型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/space/2013/0519/015728_Kcl0_698768.jpg&quot; alt=&quot;atm&quot;&gt;&lt;/p&gt;

&lt;h3&gt;以太网&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ALOHANET：短距离无线电波（夏威夷，分上行和下行，通过冲突检测）&lt;/li&gt;
&lt;li&gt;Ethernet：DIX标准（多支路电缆，通过监听电缆确定发送）、令牌（获得令牌的计算机可以发送）、IBM令牌环&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;无线 LAN：802.11&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;有基站模式：访问点（access point）&lt;/li&gt;
&lt;li&gt;无基站模式：ad hoc 网络&lt;/li&gt;
&lt;li&gt;困难：冲突检测、多径衰减、移动性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;网络标准化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;事实（de facto）、法定（de jure）&lt;/li&gt;
&lt;li&gt;电信领域：公共承运商、邮电部（PTT）、国际电信联盟（ITU或CCITT）&lt;/li&gt;
&lt;li&gt;国际标准领域：ISO，成员包括ANSI（美国）、BSI（英国）、AFNOR（法国）、DIN（德国）；电气和电子工程师协会（IEEE）&lt;/li&gt;
&lt;li&gt;Internet 标准领域：IAB（internet activities board）包括IRTF（internet research task force）和IETF（internet engineering task force），通过RFC（request for comments 标准提案-&amp;gt;标准草案）完成标准。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;物理层&lt;/h1&gt;

&lt;h2&gt;数据通信的理论基础&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;傅里叶分析&lt;/li&gt;
&lt;li&gt;带宽：传输过程中振幅不会明显减弱的一段频率范围&lt;/li&gt;
&lt;li&gt;尼奎斯特定理：无噪声、有限带宽信道的最大传输率=2Hlog2(V) b/s&lt;/li&gt;
&lt;li&gt;香农定理：带宽为H，信噪比为S/N的信道最大传输率=Hlog2(1+S/N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;有导向的传输介质&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;磁介质：物理磁带&lt;/li&gt;
&lt;li&gt;无屏蔽双绞线（UTP，unshielded twisted pair）：3类双绞线（4对在一个塑料套内）；5类双绞线（拧得更紧，串音更少）&lt;/li&gt;
&lt;li&gt;IBM屏蔽双绞线&lt;/li&gt;
&lt;li&gt;同轴电缆：屏蔽性好，可以传输很长距离&lt;/li&gt;
&lt;li&gt;光纤：多模光纤、单模光纤；有源中继器、无源星型结构&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;无线传输&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;电磁波：调频扩频、直接序列扩频&lt;/li&gt;
&lt;li&gt;无线电传输：VLF、LF、MF（沿地表）；HF、VHF（电离层）&lt;/li&gt;
&lt;li&gt;微波传输：多径衰减、ISM频段&lt;/li&gt;
&lt;li&gt;红外线与毫米波&lt;/li&gt;
&lt;li&gt;光波传输&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;通信卫星&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;异频发射应答器、弯曲管道&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;同步卫星 GEO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Geostationary Earth Orbit&lt;/li&gt;
&lt;li&gt;保持站位、足迹（覆盖范围）、小孔终端（VSAT）、中心站（hub，连接VSAT）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;中间轨道卫星 MEO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Medium Earth Orbit&lt;/li&gt;
&lt;li&gt;GPS：24颗&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;低轨道卫星 LEO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Low Earth Orbit&lt;/li&gt;
&lt;li&gt;铱计划：77颗，改名为镝（66颗卫星）；针对偏远地区的电话用户；太空转发&lt;/li&gt;
&lt;li&gt;Globalstar：48颗；传回地面转发&lt;/li&gt;
&lt;li&gt;Teledesic：288颗；针对internet用户&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;公共交换电话网络&lt;/h2&gt;

&lt;h3&gt;电话系统结构&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;电话-&amp;gt;本地回路-&amp;gt;端局-&amp;gt;长途干线-&amp;gt;长途局-&amp;gt;中心交换局-&amp;gt;长途局...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;电话业中的政治学&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ATT分解为ATT长话公司和23个Bell 运行公司（BOC，bell operating company）&lt;/li&gt;
&lt;li&gt;每个LATA（local access and transport areas）内有一个LEC（local exchange carrier）；IXC（IntereXchange carrier）在LATA区域建立POP（point of presence）实现LATA间通信。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;本地回路&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;调制解调器：正弦载波、调频、调幅、波特、码元、QPSK、QAM-16、TCM、V.32 bis(14400bps)、V.34 bis（33.6kbps）、V.90（33.6kbps上行，56kbps下行）、V.92（48kbps上行）&lt;/li&gt;
&lt;li&gt;全双工（同时两个方向的传输）、半双工（同时只有一个方向）、单工（只有一个方向）&lt;/li&gt;
&lt;li&gt;数字用户线路（DSL，digital subscriber lines）、非对称数字用户线路（ADSL，asymmetric DSL）：ATT将整个带宽划分为多个频段，包括语音、上行数据、下行数据&lt;/li&gt;
&lt;li&gt;无线本地回路：ILEC、CLEC、WLL、MMDS、LMDS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;干线和多路复用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;频分多路复用 FDM&lt;/li&gt;
&lt;li&gt;波分多路复用 WDM&lt;/li&gt;
&lt;li&gt;时分多路复用 TDM&lt;/li&gt;
&lt;li&gt;SONET/SDH&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;交换&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;电路交换：建立物理连接&lt;/li&gt;
&lt;li&gt;报文交换：存储转发网络&lt;/li&gt;
&lt;li&gt;分组交换：数据块大小上限&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;移动电话系统&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;按钮启动式通话系统：只有一个信道&lt;/li&gt;
&lt;li&gt;IMTS（improved mobile telephone system）：上行和下行信道&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;第一代：模拟语音&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AMPS（advanced mobile phone system）：蜂窝单元、微蜂窝单元、MTSO（mobile telephone switching office，移动电话交换局）、MSC（mobile switching center，移动交换中心）、移交（软移交、硬移交）&lt;/li&gt;
&lt;li&gt;信道：832个全双工信道，包括控制、呼叫、访问、数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;第二代：数字语音&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;D-AMPS（数字的高级移动电话系统）：美国，MAHO（移动电话辅助移交），使用FDM、TDM&lt;/li&gt;
&lt;li&gt;GSM（global system for mobile communication，全球移动通信系统）：美国和日本（修订形式），使用FDM、TDM&lt;/li&gt;
&lt;li&gt;CDMA（code division multiple access，码分多路访问）：美国和欧洲、时间片、正交的时间片序列（1为时间片序列、0为其补码）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;第三代：数字语音与数据&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IMT-2000（international mobile telecommunications）：ITU提出，筛选后的提案主要有两个：&lt;/li&gt;
&lt;li&gt;WCDMA（wideband CDMA）：爱立信提出，欧盟称其为UMTS（universal mobile telecomunications system） &lt;/li&gt;
&lt;li&gt;CDMA2000：qualcomm提出&lt;/li&gt;
&lt;li&gt;爱立信购买qualcomm基本方案，提出3G&lt;/li&gt;
&lt;li&gt;2.5G提案：EDGE（enhanced data rates for GSM evolution，基于GSM）、GPRS（general packet radio service，基于D-AMPS或者GSM上的层叠分组网络）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;有线电视&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;共天线电视：天线（头端）-&amp;gt;同轴电缆-&amp;gt;分接头-&amp;gt;电视落线&lt;/li&gt;
&lt;li&gt;基于有线电视网络的internet&lt;/li&gt;
&lt;li&gt;HFC（hybrid fiber coax）：交换机-&amp;gt;头端-&amp;gt;光纤干线-&amp;gt;光纤节点-&amp;gt;同轴电缆-&amp;gt;分接头-&amp;gt;住宅（用户间冲突）&lt;/li&gt;
&lt;li&gt;固定电话系统：长途局（由光纤干线相连）-&amp;gt;光纤-&amp;gt;端局-&amp;gt;本地回路-&amp;gt;铜的双绞线-&amp;gt;住宅&lt;/li&gt;
&lt;li&gt;频谱分配：上行数据、下行数据（TV、FM、下行数据流）&lt;/li&gt;
&lt;li&gt;电缆调制解调器（DOCSIS，data over cable service interface specification）：通过电视电缆访问internet&lt;/li&gt;
&lt;li&gt;ASDL与有线电视网&lt;/li&gt;
&lt;li&gt;均使用光纤的骨干网&lt;/li&gt;
&lt;li&gt;有线电视网拥有几百倍与双绞线的承载容量&lt;/li&gt;
&lt;li&gt;有线电视网难以说明有效带宽容量：取决于用户数量和电视节目带宽&lt;/li&gt;
&lt;li&gt;ASDL更可靠：备份电源&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;数据链路层&lt;/h1&gt;

&lt;h2&gt;设计要点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;为网络层提供服务：无确认的无连接服务、有确认的无连接服务、有确认的面向连接服务&lt;/li&gt;
&lt;li&gt;处理传输错误&lt;/li&gt;
&lt;li&gt;流控制：基于反馈的流控制、基于速率的流控制&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;错误检测与纠正&lt;/h2&gt;

&lt;h3&gt;纠错码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;包含冗余信息，使接收方知道肯定包含哪些信息（前向纠错）&lt;/li&gt;
&lt;li&gt;海明距离：两码字中不同位数&lt;/li&gt;
&lt;li&gt;编码方案的海明距离：合法码字列表中最小的海明距离&lt;/li&gt;
&lt;li&gt;纠错码；为检测d个错误，需要海明距离为d+1的编码方案；为纠正d个错误，需要海明距离为2d+1的编码方案&lt;/li&gt;
&lt;li&gt;海明码：纠正单个错误、突发性错误（每次传送一列，分散错误）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;检错码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;包含冗余信息，使接收方知道发生了错误并请求重传。&lt;/li&gt;
&lt;li&gt;多项式编码（polynomial code），也称CRC（cyclic redundancy check，循环冗余校验码）：在帧尾加入校验和使追加后的帧可以被生成多项式G(x)除尽。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;基本数据链路协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;无限制的单工协议&lt;/li&gt;
&lt;li&gt;单工的停-等协议：等待确认&lt;/li&gt;
&lt;li&gt;有噪声的单工协议：PAR（positive acknowledgement with retransmission，支持重传的肯定确认协议）又称ARQ（automatic repeat request，自动重复请求协议），确认超时后重传&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;滑动窗口协议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;稍待确认&lt;/li&gt;
&lt;li&gt;发送窗口、接收窗口&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;1位滑动窗口协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;收到确认后发送下一帧&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;使用回退n帧技术的协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;回避往返延时&lt;/li&gt;
&lt;li&gt;管道化技术：管道容量=带宽*往返延迟&lt;/li&gt;
&lt;li&gt;回退n帧：接收方只接受下一帧&lt;/li&gt;
&lt;li&gt;选择性重传：接收方缓存错误帧后的所有帧&lt;/li&gt;
&lt;li&gt;否定的确认帧（NAK，negative acknowledgement）：避免发送方等待确认超时&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;协议验证&lt;/h2&gt;

&lt;h3&gt;有限状态机模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可达性分析、协议机、初始状态&lt;/li&gt;
&lt;li&gt;模型内容&lt;/li&gt;
&lt;li&gt;S：进程与信道可能的状态集合&lt;/li&gt;
&lt;li&gt;M：能在信道上进行交换的帧的集合&lt;/li&gt;
&lt;li&gt;I：进程初始状态的集合&lt;/li&gt;
&lt;li&gt;T：状态之间转换的集合&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Peri网模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;模型内容&lt;/li&gt;
&lt;li&gt;库所（place）：状态&lt;/li&gt;
&lt;li&gt;变迁（transition）&lt;/li&gt;
&lt;li&gt;弧（arc）&lt;/li&gt;
&lt;li&gt;标记（token）：系统当前的状态&lt;/li&gt;
&lt;li&gt;转换用垂直或水平线表示，标记用粗黑点表示，库所用圆圈表示，&lt;/li&gt;
&lt;li&gt;激活的转换：转换的输入库所中有至少一个输入标记。激活的转换随时可以激发。&lt;/li&gt;
&lt;li&gt;文法：转换用箭头表示，两边为输入输出库所，每一转换对应一条文法。eg. BD-&amp;gt;AC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;数据链路层协议示例&lt;/h2&gt;

&lt;h3&gt;HDLC&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;历史&lt;/li&gt;
&lt;li&gt;IBMSDLC（synchronous data link control，同步数据链路控制）协议&lt;/li&gt;
&lt;li&gt;ADCCP（advanced data communication control procedure，高级数据通信控制规程）：ANSI修改&lt;/li&gt;
&lt;li&gt;HDLC（high-level data link control，高级数据链路控制）：ISO修改&lt;/li&gt;
&lt;li&gt;CCITT采纳并修改HDLC作为LAP（link access procedure，链路访问规程），及LAPB&lt;/li&gt;
&lt;li&gt;面向位的协议的帧结构：分界标志序列+地址+控制+数据+校验和+分界标志序列&lt;/li&gt;
&lt;li&gt;三种帧：信息帧、管理帧、无序号的帧&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Internet 中的数据链路层&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;internet连接过程：PC中使用TCP/IP的进程-&amp;gt;调制解调器-&amp;gt;拨号电话线（使用PPP的TCP/IP连接）-&amp;gt;调制解调器-&amp;gt;路由器-&amp;gt;路由选择进程...&lt;/li&gt;
&lt;li&gt;PPP（point-to-point protocol，点到点的协议）功能&lt;/li&gt;
&lt;li&gt;成帧的方法：无歧义分割、错误检测&lt;/li&gt;
&lt;li&gt;链路控制协议：LCP（link control protocol）&lt;/li&gt;
&lt;li&gt;协商网络层选项的方法：对每一支持的网络层给出NCP（network control protocol，网络控制协议）&lt;/li&gt;
&lt;li&gt;PPP帧格式与HDLC非常相似&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;介质访问控制子层&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;MAC（medium access control）：用于确定多路访问信道的下一个使用者，属于数据链路层底下部分。用于LAN中，而WAN是用点对点连接（卫星除外）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;信道分配问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;LAN与MAN中静态信道分配方案：多用FDM，只能满足少数目拥有繁重任务的用户。&lt;/li&gt;
&lt;li&gt;LAN与MAN中动态信道分配方案：5个假设：站（终端）模型、单信道假设、冲突假设、持续时间/分槽时间、载波监测/无载波检测。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;多路访问协议&lt;/h2&gt;

&lt;h3&gt;ALOHA&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;纯ALOHA：随时发送，检测到冲突（或未收到确认）则等待随机时间，尝试再次发送&lt;/li&gt;
&lt;li&gt;分槽ALOHA：等待下一时槽开始时才发送&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;载波检测多路访问协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1-持续CSMA（carrier sense multiple access）：持续检测信道，空闲则立即发送，冲突后等待随机时间后，再次检测和发送&lt;/li&gt;
&lt;li&gt;非持续的CSMA：检测到信道空闲则发送，信道占用则等待随机的时间后重复算法&lt;/li&gt;
&lt;li&gt;p-持续CSMA：检测到空闲，p的可能性发送，1-p的可能性延迟到下一时槽，重复该算法&lt;/li&gt;
&lt;li&gt;冲突检测的CSMA（CSMA/CD，CSMA with collision detection）：传送过程中检测到冲突则立即放弃任务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;无冲突的协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;位图协议（一种预留协议，reservation protocol）：每个竞争周期包含N个时槽，j号站要发送则在j时槽传送1位（此时槽j号站专有），这是所有站按照此队列进行传送，都结束后开始另一个N位竞争周期。&lt;/li&gt;
&lt;li&gt;二进制倒计数（binary countdown）协议：要传送的站以二进制传送自己地址（从高位开始），然后取或运算，如果一个站看到自己的高位被改为1则放弃传送。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;有限竞争协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;负载轻时竞争方法更理想；负载重是无冲突协议更好，结合起来形成有限竞争协议（limited-contention protocol）&lt;/li&gt;
&lt;li&gt;自适应树搜索协议（深度优先）：0号时槽，所有站尝试获得信道；若冲突则1号时槽只有左支可以竞争；直到没有冲突，左支某站获得信道，下一时槽只允许右枝竞争。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;波分多路访问协议 WDMA（wavelength division multiple access）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一个固定波长接收器：监听控制信道&lt;/li&gt;
&lt;li&gt;一个可调波长发送器：在其他站的控制信道发送信息&lt;/li&gt;
&lt;li&gt;一个固定波长发送器：发送数据&lt;/li&gt;
&lt;li&gt;一个可调波长接收器：选择监听一个数据发送器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;无线LAN协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;隐藏站问题：A检测到B而检测不到C，错误滴认为可以与B通信&lt;/li&gt;
&lt;li&gt;暴露站问题：A检测到介质中B与C的通信，错误的认为不能与D通信&lt;/li&gt;
&lt;li&gt;MACA（multiple access with collision avoidance，避免冲突的多路访问）：A给B发送RTS（request to send），B以CTS（clear to send）应答，这两帧均包含数据长度；此时听到RTS和CTS的站保持足够时间的沉默。&lt;/li&gt;
&lt;li&gt;MACAW（MACA for wireless）：引入ACK帧，及时重传。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;以太网&lt;/h2&gt;

&lt;h3&gt;以太网电缆&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;10Base5 粗同轴电缆（粗以太网），使用插入式分接头，在10Mbps上可支持500m&lt;/li&gt;
&lt;li&gt;10Base2 细同轴电缆（细以太网），BNC连接器（T型接头），这两种通过时间域反射计检测故障。&lt;/li&gt;
&lt;li&gt;10BaseT 双绞线，通过集线器连接&lt;/li&gt;
&lt;li&gt;10BaseF 光纤，支持上千米。每一版本的网络都可以通过中继器（repeater）扩大范围。&lt;/li&gt;
&lt;li&gt;100BaseT4 3类UTP&lt;/li&gt;
&lt;li&gt;100BaseTX 全双工，5类UTP&lt;/li&gt;
&lt;li&gt;100BaseFX 全双工，长距离，两根多模光纤&lt;/li&gt;
&lt;li&gt;1000Base-SX 多模光纤&lt;/li&gt;
&lt;li&gt;1000Base-LX 单模或多模光纤&lt;/li&gt;
&lt;li&gt;1000Base-CX 两对STP（shield twisted pair，屏蔽双绞线）&lt;/li&gt;
&lt;li&gt;1000Base-T 四对5类UTP&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;编码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;曼彻斯特编码：1（高电压+低电压）、0（低电压+高电压）&lt;/li&gt;
&lt;li&gt;差分曼彻斯特编码：间隔起始处没有相变为1，相变为0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;太网的性能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二元指数后退法：第i次冲突后，随机等待0~2^i-1个时槽&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交换式以太网：核心为交换机，每块插卡构成自己的冲突域&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;逻辑链路控制子层&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LLC（logical link control）：IEEE 802.2，与MAC构成数据链路层&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;无线LAN&lt;/h2&gt;

&lt;h3&gt;802.11物理层&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;红外线：1M和2Mbps&lt;/li&gt;
&lt;li&gt;FHSS（frequency hopping spread spectrum，调频扩频），使用79个信道，停延时间小于400ms，对多径衰减有很好的抵抗能力&lt;/li&gt;
&lt;li&gt;DSSS（direct sequence spread spectrum，直接序列扩频）：使用巴克序列，每一位需要11个时间片&lt;/li&gt;
&lt;li&gt;OFDM（orthogonal frequency division multiplexing，正交频分多路复用）：802.11a，54Mbps，52个频率&lt;/li&gt;
&lt;li&gt;HR-DSSS（high rate direct sequence spread spectrum，高速率的直接序列扩频）：802.11b，支持1、2、5.5、11Mbps；802.11g为802.11b的增强版本，理论速度为54Mbps。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;802.11 MAC子层&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;DCF（distributed coordination function，分布式协调功能），使用CSMA/CA协议，支持两种操作方法&lt;/li&gt;
&lt;li&gt;信道监听：空闲则送出整个帧，冲突后采用二元指数后退法计算等待时间&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟信道监听：以MACAW为基础，NAV（network allocation vector，网络分配向量）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PCF（point coordination function，点协调功能）：周期性广播信标帧（调频和停延时间、时钟同步等）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PCF与DCF同时运行，4种间隔：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SIFS（short interframe spacing，短帧间间隔）：允许一个会话中各部分有机会首先被送达&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PIFS（PCF interframe spacing，PCF帧间间隔）：若SIFS后得到授权的站未开始传送，则基站可能广播信标帧或表决帧&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DIFS（DCF interframe spacing，DCF帧间间隔）：若基站未有动作，任一站开始尝试得到信道，冲突采用二元指数后退法&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EIFS（extended interframe spacing，扩展帧间间隔）：收到坏帧和未知帧的站使用这个间隔&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;服务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;分发服务：基站提供&lt;/li&gt;
&lt;li&gt;关联：连接到基站&lt;/li&gt;
&lt;li&gt;分离：解除与基站的联系&lt;/li&gt;
&lt;li&gt;重新关联：改变首选基站&lt;/li&gt;
&lt;li&gt;分发：如何路由发送给基站的帧&lt;/li&gt;
&lt;li&gt;融合：翻译非802.11网络的帧&lt;/li&gt;
&lt;li&gt;站服务：单元内部进行&lt;/li&gt;
&lt;li&gt;认证：联系基站，确认新进入的站通过了基站的认证&lt;/li&gt;
&lt;li&gt;解除认证：离开网络&lt;/li&gt;
&lt;li&gt;私密性：指定使用RC4加密算法&lt;/li&gt;
&lt;li&gt;数据投递：参考以太网的模型，不保证可靠性，由上层处理检错和纠错&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;宽带无线网络&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;802.16：无线MAN，或无线本地回路，包括数据链路层与物理层&lt;/li&gt;
&lt;li&gt;带宽分配：FDD（frequency division duplexing，频分双工制）；TDD（time division duplexing，时分双工制）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;蓝牙技术 802.15&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;微微网：蓝牙系统的基本单元。微微网中有一个主节点，可以有7个活动的从节点，255个静观节点。&lt;/li&gt;
&lt;li&gt;分散网：一组互相连接的微微网，通过当作桥的从节点连接&lt;/li&gt;
&lt;li&gt;应用轮廓：一般访问、服务发现、串行端口、一般的对象交换、LAN访问……&lt;/li&gt;
&lt;li&gt;协议栈：物理层（物理无线电、基带）-&amp;gt;数据链路层（基带、链路控制）-&amp;gt;中间件层（电话、服务发现）-&amp;gt;应用程序（应用轮廓）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;数据链路层交换&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;802.x到802.y的网桥：在LLC层进行翻译&lt;/li&gt;
&lt;li&gt;本地网络互连：网桥使用扩散算法、逆向学习法&lt;/li&gt;
&lt;li&gt;生成树网桥：，采用序列号生成树，低位变为根；解决并行的透明网桥产生的回路&lt;/li&gt;
&lt;li&gt;远程网桥：采用PPP协议，将完整的MAC帧放入净荷域&lt;/li&gt;
&lt;li&gt;交换设施区别：物理层（转发器、集线器）；数据链路层（网桥、交换机）；网络层（路由器）；传输层（传输网关）；应用层（应用网关）
*虚拟LAN（VLAN）&lt;/li&gt;
&lt;li&gt;通过网桥或交换机的配置表来路由&lt;/li&gt;
&lt;li&gt;每个端口分配一个VLAN颜色：VLAN所有机器在统一端口才可以&lt;/li&gt;
&lt;li&gt;每个MAC地址分配一个VLAN颜色：从帧中提出MAC地址进行匹配&lt;/li&gt;
&lt;li&gt;每个3层协议或IP分配一个VLAN颜色：须检查净荷域&lt;/li&gt;
&lt;li&gt;IEEE 802.1Q：改变以太网的帧头、可理解VLAN的交换机&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;网络层&lt;/h1&gt;

&lt;h2&gt;设计要点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;存储-转发分组交换&lt;/li&gt;
&lt;li&gt;向传输层提供服务：独立于路由器技术、路由器数量类型拓扑关系对传输层不可见、跨越多个LAN和WAN进行统一编址&lt;/li&gt;
&lt;li&gt;无连接服务的实现：数据报、数据报子网&lt;/li&gt;
&lt;li&gt;面向连接服务的实现：虚电路（VC，virtual circuit）、虚电路子网；要求建立电路、路由器建立表项、分组只含VC号而不需目标和源地址、路由失效将终止、容易实现服务质量和拥塞控制&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;路由算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;路由：确定该使用哪一条路径&lt;/li&gt;
&lt;li&gt;转发：当一个分组到达时所采取的的动作&lt;/li&gt;
&lt;li&gt;自适应算法：会根据拓扑结构和流量的变化改变路由决策&lt;/li&gt;
&lt;li&gt;非自适应算法：不会根据当前测量或者估计的流量和拓扑结构，来调整它们的路由决策（静态路由）&lt;/li&gt;
&lt;li&gt;会话路由：虚电路子网中路由，当建立虚电路时才需要确定路由路径&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;优化原则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;最优化原则：如果路由器J在I到K的最优路径上，则J到K的最优路径也必定沿着同样的路由路径。&lt;/li&gt;
&lt;li&gt;汇集树：从所有的源到一个制定目标的最优路径的集合构成以目标节点为根的树。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;最短路径路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;跳数、物理距离、延迟&lt;/li&gt;
&lt;li&gt;Dijkstra标记算法：两个节点间最短路径的算法，初始时所有节点的标记（从源节点沿着当前已知的最佳路径到达该节点的距离）都是暂时的，当已经发现一个标记代表了最短可能路径的时候，标记被变为永久的（以后不再改变）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;扩散算发&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;同样为静态的路由算法&lt;/li&gt;
&lt;li&gt;每一个进来的分组都被发送到除了进来的那条路线之外的每一条输出线路上。&lt;/li&gt;
&lt;li&gt;抑制扩散过程&lt;/li&gt;
&lt;li&gt;分组头包含跳计数器，初始值等于源于目标间路径长度或最坏情形下的长度（子网直径）&lt;/li&gt;
&lt;li&gt;分组头包含序列号，让路由记录已经被扩散过的分组&lt;/li&gt;
&lt;li&gt;选择性扩散：只输出到大概方向正确的线路上&lt;/li&gt;
&lt;li&gt;扩散法并不实用，但其高度健壮性可用于军事用途&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;距离矢量路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;属于动态的路由算法&lt;/li&gt;
&lt;li&gt;每个路由器维护一张表（即一个矢量），列出已知目标的最佳距离及线路，通过与邻居交换信息不断更新&lt;/li&gt;
&lt;li&gt;Bellman-Ford 路由算法、Ford-Fulkerson算法&lt;/li&gt;
&lt;li&gt;无穷计算问题：X告诉Y它有一条路径的时候，Y无法知道自己是否在这条路径上。每次更新列表，坏消息扩散一步，直至无穷大。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;链路状态路由&lt;/h3&gt;

&lt;p&gt;路由器的工作分为5个部分&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;发现邻居节点：启动时发送HELLO分组给邻居，邻居以其网络地址应答&lt;/li&gt;
&lt;li&gt;测量线路开销：发送ECHO分组，得到邻居节点的延迟&lt;/li&gt;
&lt;li&gt;创建链路状态分组：包括发送方标识、序列号、年龄、邻居及其延迟列表&lt;/li&gt;
&lt;li&gt;发布链路状态分组：扩散法&lt;/li&gt;
&lt;li&gt;序列号回转，采用32位序列号&lt;/li&gt;
&lt;li&gt;路由器崩溃，从0开始的下一分组将被作为重复分组而拒绝&lt;/li&gt;
&lt;li&gt;序列号破坏，将作为过时分组而拒绝&lt;/li&gt;
&lt;li&gt;计算新的路由路径：获得所有链路状态分组后，运行Dijkstra算法构建出到所有可能目标的最短路径&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另一路由状态协议是IS-IS（intermediate system-intermediate system，中间系统对中间系统），原用于DECnet、NSFNET骨干网、CDPD、Novell Netware（使用变种NLSP来路由IPX分组），后被ISO采纳为无连接网络层协议CLNP，后被多次修改，如IP协议。&lt;/p&gt;

&lt;p&gt;OSPF采纳了IS-IS，但IS-IS编码方法支持携带多个网络层协议的信息，二OSPF不具备这样的特性。&lt;/p&gt;

&lt;h3&gt;分级路由&lt;/h3&gt;

&lt;p&gt;路由器被划分为区域（region），区域被组织为群（cluster），群被组织为区（zone），区被组织为组（group）。路由器只知道自己所在区域的目标地址。&lt;/p&gt;

&lt;h3&gt;广播路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;广播：同时将所有目标发送一个分组&lt;/li&gt;
&lt;li&gt;实现方法&lt;/li&gt;
&lt;li&gt;源机器给每一目标单独发送&lt;/li&gt;
&lt;li&gt;扩散法&lt;/li&gt;
&lt;li&gt;多目标路由：只给必要的路线发送&lt;/li&gt;
&lt;li&gt;汇集树&lt;/li&gt;
&lt;li&gt;逆向路径转发：如果通过常用发送分组的线路到达，则认为是第一份副本并转发&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;多播路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;只给一组目标发送，而不是发送给所有目标&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;移动主机路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;主场所：主机的永久性地址&lt;/li&gt;
&lt;li&gt;外部代理：记录当前访问该区域的移动主机&lt;/li&gt;
&lt;li&gt;本地代理：记录主场所在这个区域，当前正在访问其他区域的主机&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Ad Hoc 网络中的路由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;每个节点包含一个主机和一个路由器，节点两两相邻，则成为Ad Hoc网络或MANET（mobile ad hoc networks，移动Ad Hoc 网络）&lt;/li&gt;
&lt;li&gt;AODV（ad hoc on-demand distance vector）路由算法：类似Bellman-Ford距离矢量算法&lt;/li&gt;
&lt;li&gt;路径发现&lt;/li&gt;
&lt;li&gt;路径维护：活动邻居&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;对等网络中的节点查询&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;节点标识符：IP地址的160位散列值&lt;/li&gt;
&lt;li&gt;键：记录名字的160位散列值，该记录的索引关联信息保存在对应标识符的节点上&lt;/li&gt;
&lt;li&gt;successor(i)返回从i开始第一个实际节点的标识符&lt;/li&gt;
&lt;li&gt;指取表：加快了搜索目标节点IP的过程&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;拥塞控制算法&lt;/h2&gt;

&lt;h3&gt;通用原则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;监视系统，检测何时何地发送了拥塞&lt;/li&gt;
&lt;li&gt;将该信息传递到能够采取行动的地方&lt;/li&gt;
&lt;li&gt;调整系统运行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;拥塞预防策略&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;传输层：重传、乱序缓存、确认、流控制、确认超时&lt;/li&gt;
&lt;li&gt;网络层：子网内部的虚电路与数据报、分组排队和服务、分组丢弃、路由算法、分组生存期管理&lt;/li&gt;
&lt;li&gt;数据链路层：重传、乱序缓存、确认、流控制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;虚电路子网中的拥塞控制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;准入控制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;数据报子网中的拥塞控制&lt;/h3&gt;

&lt;p&gt;每条线路关联一个变量 u新 = a u旧 + (1-a)f，a表示了路由器忘记历史有多快&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;警告位：位于分组头，分组到达目标端后，传输实体将警告位复制到下一确认分组，源主机因此削减流量&lt;/li&gt;
&lt;li&gt;抑制分组：路由器直接给源主机送回一个抑制分组 （choke packet）&lt;/li&gt;
&lt;li&gt;逐跳（hop-by-hop）抑制分组：影响沿途的每一跳，收到抑制分组的路由立即减慢该方向的分组（要求分配更多的缓冲区）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;负载丢弃&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;随机的早期检测：RED（random early detection，随机的早期检测）算法，在恶化之前开始丢弃分组&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;抖动控制&lt;/h3&gt;

&lt;p&gt;每一跳都记录期望传输时间，到达晚了就尽快转发，否则多停留一段时间&lt;/p&gt;

&lt;h2&gt;服务质量&lt;/h2&gt;

&lt;h3&gt;好的服务质量所使用的技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;过度提供资源&lt;/li&gt;
&lt;li&gt;缓冲能力：接收方在递交数据前缓存起来&lt;/li&gt;
&lt;li&gt;流量整形：在服务器段进行平滑处理；服务等级协定（承运商与顾客）、流量监管（对业务流进行监视）&lt;/li&gt;
&lt;li&gt;漏桶算法：Turner（1986），常数服务时间的单服务器排队系统&lt;/li&gt;
&lt;li&gt;令牌桶：每隔一段时间产生令牌，每送出去一个分组，计数器减一，到零时不再发送分组。令牌足够时以最大速度输出，此后为令牌产生速度&lt;/li&gt;
&lt;li&gt;资源预留：带宽、缓冲区空间、CPU周期&lt;/li&gt;
&lt;li&gt;准入控制&lt;/li&gt;
&lt;li&gt;比例路由：分散流量到多条路径&lt;/li&gt;
&lt;li&gt;分组调度：流之间公平排队、加权的公平排队&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;综合服务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基于流的算法或综合服务（RFC2205~2210）：流式多媒体的体系结构&lt;/li&gt;
&lt;li&gt;资源预留协议（resource reservation protocol，RSVP）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;区分服务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基于类别的服务质量（相对于基于流的服务质量）&lt;/li&gt;
&lt;li&gt;快速型转发：另外的通道&lt;/li&gt;
&lt;li&gt;确保行转发：确保不会丢弃分组&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;标签交换和MPLS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MPLS（multiprotocol label switching，多协议标签交换）：RFC 3031，在数据链路层之上添加MPLS头&lt;/li&gt;
&lt;li&gt;MPLS与VC（虚电路）区别&lt;/li&gt;
&lt;li&gt;MPLS 将多个发往同一目标的分组组合起来（虚电路做不到）&lt;/li&gt;
&lt;li&gt;建立转发表&lt;/li&gt;
&lt;li&gt;虚电路：在建立连接时发送setup packet到网络中建立转发表&lt;/li&gt;
&lt;li&gt;MPLS：&lt;/li&gt;
&lt;li&gt;数据驱动：分组到来时，联系下一跳生成这一分组流（FEC，forwarding equivalence class，转发等价类）的标签；使用有色绳索来避免环&lt;/li&gt;
&lt;li&gt;控制驱动：路由启动时，检查哪些路由路径中自己是最终目标，然后为该路径建立FEC（forwarding equivalence class，转发等价类）并分配标签，将标签传递给邻居，传给所有的路由器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;网络互联&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;多协议路由器&lt;/li&gt;
&lt;li&gt;面向连接的网络互联：级联虚电路&lt;/li&gt;
&lt;li&gt;无连接的网络互联：数据报模型&lt;/li&gt;
&lt;li&gt;隧道技术：将IP分组插入WAN网络层分组净荷域中发送&lt;/li&gt;
&lt;li&gt;互联网路由：内部网关协议、外部网关协议、自治系统（AS，autonomous system）&lt;/li&gt;
&lt;li&gt;分段：每个网络会限制分组的最大长度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Internet上的网络层&lt;/h2&gt;

&lt;p&gt;原则&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证它能够工作&lt;/li&gt;
&lt;li&gt;尽可能使它简单&lt;/li&gt;
&lt;li&gt;作出明确的选择&lt;/li&gt;
&lt;li&gt;尽可能做到模块化&lt;/li&gt;
&lt;li&gt;期望具备异构性&lt;/li&gt;
&lt;li&gt;避免使用固定不变的选择和参数&lt;/li&gt;
&lt;li&gt;寻找一个好的设计，它不必是最完美的&lt;/li&gt;
&lt;li&gt;对于发送操作一定要严格，而对于接收操作要有一定的容忍度&lt;/li&gt;
&lt;li&gt;要考虑伸缩性&lt;/li&gt;
&lt;li&gt;要考虑性能和代价&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;IP协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IPV4头：版本、IHL、服务类型、总长度、标识、DF、MF、分段偏移、生命期、协议、头部校验和、源地址、目的地址、选项&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;IP地址&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;分类的编制方案（classful addressing）&lt;/li&gt;
&lt;li&gt;A类：0+网络+主机；1.0.0.0~127.255.255.255&lt;/li&gt;
&lt;li&gt;B类：10+网络+主机；128.0.0.0~191.255.255.255&lt;/li&gt;
&lt;li&gt;C类：110+网络+主机；192.0.0.0~223.255.255.255&lt;/li&gt;
&lt;li&gt;D类：1110+多播地址；224.0.0.0~239.255.255.255&lt;/li&gt;
&lt;li&gt;E类：11110+保留将来使用；240.0.0.0~247.255.255.255&lt;/li&gt;
&lt;li&gt;网络号管理：ICANN（internet corporation for assigned names and numbers）&lt;/li&gt;
&lt;li&gt;点分十进制标记法&lt;/li&gt;
&lt;li&gt;子网：通过子网掩码分别路由&lt;/li&gt;
&lt;li&gt;CIDR-Classless InterDomain Routing（无类别域间路由）：RFC 1519，将剩余的IP地址以可变大小块的方式进行分配，而不管它们所属的类别；聚集表项（用二进制地址与掩码标识一组IP地址）&lt;/li&gt;
&lt;li&gt;NAT-网络地址转换&lt;/li&gt;
&lt;li&gt;为每个公司分配一个IP地址用于传输Internet流量；公司内部用每台计算机唯一的IP地址常用来传输内部流量。&lt;/li&gt;
&lt;li&gt;三段保留的IP地址范围如下，包含这些地址的分组不应出现在Internet上&lt;/li&gt;
&lt;li&gt;10.0.0.0-10.255.255.255/8&lt;/li&gt;
&lt;li&gt;172.16.0.0-172.31.255.255/12&lt;/li&gt;
&lt;li&gt;192.168.0.0-192.168.255.255/16&lt;/li&gt;
&lt;li&gt;操作方式：IP分组大多携带UDP或TCP净荷，从中提出目标端口和源端口进行一次转换，以TCP为例&lt;/li&gt;
&lt;li&gt;请求建立TCP连接时，替换TCP的源地址与源端口，替换IP与TCP头部校验和，建立源地址与源端口的表项（共65535个）&lt;/li&gt;
&lt;li&gt;IP分组到达时，取出TCP的目标端口，查找对应的内部IP表项，替换目标端口与目标地址，替换IP与TCP头部校验和，转发给内部主机&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Internet 控制协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Internet 控制消息协议（ICMP，internet control message protocol）：报告Internet有关事件&lt;/li&gt;
&lt;li&gt;ARP-地址解析协议（address resolution protocol）&lt;/li&gt;
&lt;li&gt;要发送分组的主机首先发送一个广播分组到以太网络，询问IP对应的以太网地址，只有拥有该IP的主机以其以太网地址应答&lt;/li&gt;
&lt;li&gt;优化：1.缓存结果；2.机器启动时广播地址映射，请求查询自己的IP，检测有无冲突（应答）&lt;/li&gt;
&lt;li&gt;RARP（reverse address resolution protocol，反向地址解析协议）：机器启动时询问自己IP，RARP服务器送回它的IP。因受限的广播（全1的目标地址）不会被路由转发，每个网络都需要一个RARP服务器。&lt;/li&gt;
&lt;li&gt;BOOTP：RFC951、1048、1084，机器启动时使用UDP分组来询问自己IP。新加入的主机要系统管理员为它分配IP地址并加入BOOTP配置文件。&lt;/li&gt;
&lt;li&gt;DHCP（dynamic host configuration protocol，动态主机配置协议）：RFC 2131、2132，允许手工分配IP，也允许自动分配。也通过广播发送请求，每一网络有一DHCP中继代理（relay agent），主机先广播DHCP DISCOVER分组，DHCP中继代理单播给DHCP服务器，进而获得IP地址。租用：主机需在租用期到达之前申请续租，否则将释放其IP。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;OSPF-内部网关路由协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;OSPF（open shortest path first）将每个AS划分为编号的区域（area），每个AS有一骨干网络（backbone area），编号为0.&lt;/li&gt;
&lt;li&gt;OSPF区分4种路由器：&lt;/li&gt;
&lt;li&gt;内部路由器：完全在一个区域内部&lt;/li&gt;
&lt;li&gt;区域边界路由器：连接两个或多个区域&lt;/li&gt;
&lt;li&gt;骨干路由器：位于骨干区域上&lt;/li&gt;
&lt;li&gt;AS边界路由器：与其他AS中的路由器进行通信&lt;/li&gt;
&lt;li&gt;邻接的：OSPF要求每个LAN中选举出一台指派路由器（designated router），该路由器与该LAN上所有其他路由器都是邻接的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;BGP-外部网关路由协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;BGP（border gateway protocol）将网络分为三种：末端网络（与BGP图只有一个连接）、多连接网络（一般可用来传输中转流量）、穿越网络（愿意处理第三方分组，不过有限制条件）&lt;/li&gt;
&lt;li&gt;BGP路由间通过TCP连接通信&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Internet 多播&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IP通过D类地址来支持多播，要通过特殊的多播路由器&lt;/li&gt;
&lt;li&gt;IP支持两种组地址&lt;/li&gt;
&lt;li&gt;永久地址&lt;/li&gt;
&lt;li&gt;224.0.0.1 一个LAN上的所有系统&lt;/li&gt;
&lt;li&gt;224.0.0.2 一个LAN上的所有路由器&lt;/li&gt;
&lt;li&gt;224.0.0.5 一个LAN上的所有OSPF路由器&lt;/li&gt;
&lt;li&gt;224.0.0.6 一个LAN上的所有指派路由器&lt;/li&gt;
&lt;li&gt;临时组：进程要求主机加入或离开某个组，主机记录它的进程属于哪个组&lt;/li&gt;
&lt;li&gt;查询和应答分组使用IGMP（internet group management protocol）协议&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;移动IP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可通过主动ARP（gratuitous ARP）更新路由器的映射缓存&lt;/li&gt;
&lt;li&gt;外部代理通过定时发送广告分组（advertisement）来通知新进入的主机&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;IPv6&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IPv6为IEEE Network发表的SIPP（simple internet protocol plus，增强的简单Internet协议）&lt;/li&gt;
&lt;li&gt;IPv6头部：版本、流量类别、流标签、净荷长度、下一个头、跳数限制、源地址、目标地址&lt;/li&gt;
&lt;li&gt;扩展头部：为兼容IPv4，跟在固定头部的后面（可以有多个）&lt;/li&gt;
&lt;li&gt;16字节固定长度编址&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;传输层&lt;/h1&gt;

&lt;h2&gt;传输服务&lt;/h2&gt;

&lt;h3&gt;向上层提供的服务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;传输实体：传输层内部，利用网络层提供的服务，向它的用户提供高效、可靠和性价比合理的服务的硬件/软件&lt;/li&gt;
&lt;li&gt;传输服务提供者、传输服务用户&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;传输服务原语&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LISTEN、CONNECT、SEND、RECEIVE、DISCONNECT&lt;/li&gt;
&lt;li&gt;TPDU（transport protocol data unit，传输协议数据单元）：从传输实体发送到另一个传输实体的消息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;伯克利套接字（berkeley socket）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Berkeley UNIX使用的TCP socket原语：SOCKET、BIND、LISTEN、ACCEPT、CONNECT、SEND、RECV、CLOSE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;传输协议的要素&lt;/h2&gt;

&lt;h3&gt;编址&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为监听连接请求的进程定义相应的传输地址，Internet：端口（port）；ATM：AAL-SAP；一般术语：TSAP（transport service access point，传输服务访问点）&lt;/li&gt;
&lt;li&gt;同样，网络层的端点称为NSAP（network service access point，网络服务访问点），IP为一个特例。&lt;/li&gt;
&lt;li&gt;初始连接协议：采用进程服务器为那些较少使用的服务器提供代理功能（监听一组端口），请求到达时启动相应的服务器，继承与客户的连接。&lt;/li&gt;
&lt;li&gt;名字服务器（目录服务器）：在特殊硬件运行，不能在用户通话时临时创建&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;建立连接&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;分组生存周期：受限制的子网设计、分组设置跳计数器、分组时间戳&lt;/li&gt;
&lt;li&gt;TPDU编号，相等编号的TPDU不会同时有效，序列号空间应足够大，序列号回绕时同样编号的TPDU都已经消失&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;释放连接&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;两军队问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;流控制和缓冲&lt;/h3&gt;

&lt;h3&gt;多路复用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;向上多路复用：传输实体将TPDU交给上层指定的进程&lt;/li&gt;
&lt;li&gt;向下多路复用：将流量分布到多个网络连接&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;崩溃恢复&lt;/h3&gt;

&lt;h2&gt;有限状态机描述传输协议&lt;/h2&gt;

&lt;h2&gt;Internet 传输协议-UDP&lt;/h2&gt;

&lt;h3&gt;UDP介绍&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;UDP（User Datagram Protocol，用户数据报协议）数据段由8字节头和净荷域构成。&lt;/li&gt;
&lt;li&gt;UDP头：源端口、目标端口、UDP长度、UDP校验和&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;远过程调用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RPC（remote procedure call，远过程调用）：让远程调用像本地过程调用一样，客户程序需要绑定一个小的库过程（客户存根），服务器程序绑定一个服务器存根。&lt;/li&gt;
&lt;li&gt;参数包装：列集（marshaling）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;实时传输协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RTP（real-time transport protocol，实时传输协议）：RFC 1889&lt;/li&gt;
&lt;li&gt;用户空间（多媒体应用-&amp;gt;RTP）-&amp;gt;套接字接口-&amp;gt;操作系统内核（UDP-&amp;gt;IP-&amp;gt;以太网）&lt;/li&gt;
&lt;li&gt;RTCP（realtime transport control protocol，实时传输控制协议）：处理反馈、同步和用户界面等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Internet 传输协议-TCP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TCP（transport control protocol，传输控制协议）：在不可靠的互联网络提供一个可靠的端到端字节流。&lt;/li&gt;
&lt;li&gt;TCP服务模型：16位端口，1024以下为知名端口&lt;/li&gt;
&lt;li&gt;守护进程（unix中称inetd，internet daemon）：同时关联到多个端口，连接进入时fork出新的进程&lt;/li&gt;
&lt;li&gt;紧急数据：URGENT标记&lt;/li&gt;
&lt;li&gt;TCP数据段（TCP segment）；MTU（maximum transfer unit，最大传输单元），以太网通常为1500字节净荷。&lt;/li&gt;
&lt;li&gt;TCP数据段（包括20字节的头）：源端口、目标端口、序列号、确认号、TCP长度、URG、ACK、PSH、PST、SYN、FIN、窗口大小、校验和、紧急指针、可选项、数据&lt;/li&gt;
&lt;li&gt;TCP连接的建立：SYN(SEQ=x)-&amp;gt;SYN(SEQ=y, ACK=x+1)-&amp;gt;SYN(SEQ=x+1, ACK=y+1)&lt;/li&gt;
&lt;li&gt;TCP传输策略：Nagle算法，数据进入发送方后只发送第一字节，其后的字节缓冲起来，直到第一字节被确认为止。&lt;/li&gt;
&lt;li&gt;TCP拥塞控制：网络容量（拥塞窗口）、接收方容量（接收方准许窗口）、慢启动法、阈值&lt;/li&gt;
&lt;li&gt;TCP定时器管理：重传定时器、持续定时器（确认超时的探询消息）、保活定时器（一段时间后发送，对方不应答则终止连接）&lt;/li&gt;
&lt;li&gt;无线TCP和UDP：间接TCP、同质的网络&lt;/li&gt;
&lt;li&gt;事务型TCP：用UDP来实现RPC的高效率，用TCP实现可靠性，T/TCP（transaction TCP，事务型TCP）；SCTP（stream control transmission protocol，流控制传输协议）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;性能问题&lt;/h2&gt;

&lt;p&gt;广播风暴、带宽-延迟乘积&lt;/p&gt;

&lt;h3&gt;网络性能的测量&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;确保样本空间足够大&lt;/li&gt;
&lt;li&gt;确保样本具有代表性&lt;/li&gt;
&lt;li&gt;使用粗粒度时钟时要谨慎&lt;/li&gt;
&lt;li&gt;确保在测试过程中不会发生不可预知的事情&lt;/li&gt;
&lt;li&gt;缓存机制可能会破坏测量的正确性&lt;/li&gt;
&lt;li&gt;理解所测量的指标&lt;/li&gt;
&lt;li&gt;在往外推广结果时要谨慎&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;具有更好性能的系统设计&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CPU速度比网络速度更加重要&lt;/li&gt;
&lt;li&gt;减少分组的数量可以减少软件开销&lt;/li&gt;
&lt;li&gt;使环境切换的次数减到最少&lt;/li&gt;
&lt;li&gt;使复制操作的次数减到最少&lt;/li&gt;
&lt;li&gt;可以购买更多的带宽，但无法要求更低的延迟&lt;/li&gt;
&lt;li&gt;应该想办法避免拥塞，而不是从拥塞中恢复&lt;/li&gt;
&lt;li&gt;避免超时&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;快速的TPDU处理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;分离出正常的发送操作病对它们作特殊处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;针对千兆网络的协议&lt;/h3&gt;

&lt;p&gt;旧的协议面临的问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;32位序列号：对于1Gbps的以太网，一轮序列号回绕时间为34s，大于internet上最大分组生存周期120s&lt;/li&gt;
&lt;li&gt;通信速度的提高比计算速度的提高快得多&lt;/li&gt;
&lt;li&gt;如果一条线路的带宽-延迟乘积非常大，则回退n步协议的性能会非常差&lt;/li&gt;
&lt;li&gt;千兆位线路本质上不同于1兆位线路，因为长的千兆位线路的主要制约因素是延迟，而不是带宽&lt;/li&gt;
&lt;li&gt;对于许多千兆位应用，分组到达时间的偏差与平均延迟本身一样重要&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;应用层&lt;/h1&gt;

&lt;h2&gt;DNS-域名系统&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DNS（Domain name system）：RFC 1034、1035，调用解析器（resolver）将名字映射成IP地址&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;DNS名字空间&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;DNS名字空间：internet被分为200多个顶级域，每个域被分为若干子域，子域又被进一步划分，以此类推。&lt;/li&gt;
&lt;li&gt;顶级域有两种：通用域和国家域&lt;/li&gt;
&lt;li&gt;通用域包括com（商业的）、edu（教育性机构）、int（国际性组织）、mil（美国军队）、net（网络供应商）、org（非营利性组织）、biz（商贸）、info（信息）、name（人们的名字）、pro（职业）、aero（航空业）、coop（合作社）、museum（博物馆）&lt;/li&gt;
&lt;li&gt;国家域定义在ISO 3166中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;资源记录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;每个域都有一组与它相关联的资源记录；当解析器把域名传递给DNS时，DNS所返回的是与该域名相关联的资源记录。&lt;/li&gt;
&lt;li&gt;每条资源记录是一个5元组：Domain_name（域名）、Time_to_live（生存期）、class（类别）、type（类型）、value（值）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;名字服务器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;权威记录：来自于管理该记录的权威机构，因此总是正确的&lt;/li&gt;
&lt;li&gt;递归查询：当解析器接收到一个域名查询时，它将该查询传递给本地的一个名字服务器，如果被查询域名落在该名字服务器的管辖范围内，那么返回权威的资源记录；如果本地没有关于它的信息，那么本地名字服务器向顶级名字服务器发送一条查询此域的消息。&lt;/li&gt;
&lt;li&gt;LDAP（lightweight directory access protocol，轻量级目录访问协议）：RFC 2251，定位到一般的对象，如人员、资源、服务等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;电子邮件&lt;/h2&gt;

&lt;h3&gt;结构与服务&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;用户代理：阅读和发送电子邮件&lt;/li&gt;
&lt;li&gt;消息传输代理：将消息从源端传送到目标端&lt;/li&gt;
&lt;li&gt;电子邮件基本功能 &lt;/li&gt;
&lt;li&gt;撰写&lt;/li&gt;
&lt;li&gt;传输&lt;/li&gt;
&lt;li&gt;报告&lt;/li&gt;
&lt;li&gt;显示&lt;/li&gt;
&lt;li&gt;处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;消息格式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RFC 822：基本ASCII电子邮件&lt;/li&gt;
&lt;li&gt;头域：To、Cc、Bcc、From、Sender、Received、Return-Path、Data、Reply-To、Message-Id、In-Reply-To、References、Keywords、Subject&lt;/li&gt;
&lt;li&gt;MIME-多用途Internet邮件扩展&lt;/li&gt;
&lt;li&gt;头域：MIME-Version、Content-Description、Content-Id、Content-Transfer-Encoding、Content-Type&lt;/li&gt;
&lt;li&gt;二进制消息编码（base64编码，又称ASCII盔甲）：0-63分别为A-Z、a-z、0-9、+、/；==与=分别代表一个组只含8位或者16位；对少量非ASCII字符的消息编码效率较低&lt;/li&gt;
&lt;li&gt;可打印的引用编码（quoted-printable encoding）：7位的ASCII编码，所有超过127的字符被编码为等号+2个用16进制数字表示的字符值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;消息传输&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SMTP（simple mail transfer protocol，简单邮件传输协议） &lt;/li&gt;
&lt;li&gt;在25号端口建立TCP连接&lt;/li&gt;
&lt;li&gt;命令：HELLO、MAIL FROM、RCPT TO、DATA等&lt;/li&gt;
&lt;li&gt;ISP服务器上运行消息传输代理，接收邮件&lt;/li&gt;
&lt;li&gt;POP3（post office protocol version 3，邮局协议第三版）&lt;/li&gt;
&lt;li&gt;在110端口建立TCP连接&lt;/li&gt;
&lt;li&gt;RFC 1939，用户从ISP的消息传输代理获得电子邮件&lt;/li&gt;
&lt;li&gt;假设用户每次交互后清除邮箱后脱机工作&lt;/li&gt;
&lt;li&gt;IMAP（internet message access protocol，Internet 消息访问协议）&lt;/li&gt;
&lt;li&gt;在143端口建立TCP连接&lt;/li&gt;
&lt;li&gt;假设用户的邮件会永久地保存在服务器上&lt;/li&gt;
&lt;li&gt;投递特性：过滤器、假期守护程序（自动回复）&lt;/li&gt;
&lt;li&gt;webmail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;万维网&lt;/h2&gt;

&lt;h3&gt;结构概述&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;URL（unform resource locator，统一资源定位符）：命名web页面&lt;/li&gt;
&lt;li&gt;组成：协议（也称方案，scheme）+页面所在机器的DNS名字，唯一指定特定页面的本地名字&lt;/li&gt;
&lt;li&gt;协议类型：http（hypertext transfer protocol，超文本传输协议）、ftp、file、news（NNTP，network news transfer protocol，网络新闻传输协议）、gopher、mailto、telnet&lt;/li&gt;
&lt;li&gt;URN（universal resource name，通用资源名）：RFC 2141，不指定页面所在位置就能够引用页面，可减轻服务器负载&lt;/li&gt;
&lt;li&gt;客户端&lt;/li&gt;
&lt;li&gt;浏览器运行步骤&lt;/li&gt;
&lt;li&gt;确定URL&lt;/li&gt;
&lt;li&gt;查询DNS以确定IP&lt;/li&gt;
&lt;li&gt;与IP的80端口建立TCP连接&lt;/li&gt;
&lt;li&gt;发送请求以获取URL指向的文件&lt;/li&gt;
&lt;li&gt;服务器发送文件，释放TCP连接&lt;/li&gt;
&lt;li&gt;浏览器显示文件中的文本，取回并显示图片&lt;/li&gt;
&lt;li&gt;浏览器扩展&lt;/li&gt;
&lt;li&gt;插件：代码模块，浏览器从磁盘取出，安装称自己的一个扩展模块，运行在浏览器内部，完成工作后从浏览器内存中移除掉&lt;/li&gt;
&lt;li&gt;辅助应用程序：完整的应用程序，作为独立的进程来运行，接受临时文件的名字来打开文件&lt;/li&gt;
&lt;li&gt;服务器端&lt;/li&gt;
&lt;li&gt;服务器运行步骤 &lt;/li&gt;
&lt;li&gt;接收来自客户（浏览器）的TCP连接&lt;/li&gt;
&lt;li&gt;获取所需文件名&lt;/li&gt;
&lt;li&gt;从磁盘获取文件&lt;/li&gt;
&lt;li&gt;将文件返回给客户&lt;/li&gt;
&lt;li&gt;释放TCP连接&lt;/li&gt;
&lt;li&gt;服务器场（server farm）&lt;/li&gt;
&lt;li&gt;组织：前端连接到一个LAN中，LAN中有一个路由器和若干处理节点（独立的计算机）&lt;/li&gt;
&lt;li&gt;TCP移交（TCP handoff）：避免所有请求与回复都通过前端&lt;/li&gt;
&lt;li&gt;无状态特性与cookie&lt;/li&gt;
&lt;li&gt;RFC 2109：当用户请求web页面时，可以提供附加信息cookie（最大4k）&lt;/li&gt;
&lt;li&gt;cookie域：域名、路径、内容、过期时间、安全&lt;/li&gt;
&lt;li&gt;非持久的cookie：没有包含过期时间域，浏览器退出时丢弃&lt;/li&gt;
&lt;li&gt;持久的cookie：包含过期时间域&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;静态web文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML（hypertext markup language，超文本标记语言）&lt;/li&gt;
&lt;li&gt;表单&lt;/li&gt;
&lt;li&gt;XML（extensible markup language，可扩展标记语言）&lt;/li&gt;
&lt;li&gt;XSL（extensible style language，可扩展样式语言）&lt;/li&gt;
&lt;li&gt;SOAP（simple object access protocol，简单对象访问协议）：应用之间执行RPC（远过程调用）的方法，以XML构造请求，以HTTP发送&lt;/li&gt;
&lt;li&gt;XHTML（extended hypertext markup language，扩展的超文本标记语言）：用于小型移动设备，语法更挑剔&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;动态web文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务器端动态web页面生成（动态html）：CGI（common gateway interface，公共网关接口）、PHP（hypertext preprocessor，超文本预处理器）、JSP（javaserver pages，java服务器页面）、ASP（active server page，活动的服务器页面，ms版的php和jsp）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端动态网页生成：javascript、applet（jvm上运行的java小程序）、activeX控件（ms）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;HTTP-超文本传输协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;连接：HTTP1.0服务器回应后关闭TCP连接；HTTP1.1支持持续连接&lt;/li&gt;
&lt;li&gt;方法：GET、PUT、HEAD、POST、DELETE、TRACE、CONNECT、OPTIONS&lt;/li&gt;
&lt;li&gt;消息头：请求头、回应头&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;性能增强&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;缓存、代理（维护缓存）&lt;/li&gt;
&lt;li&gt;服务器复制：镜像、瞬间拥挤&lt;/li&gt;
&lt;li&gt;内容分发网络：CDN（content delivery network），图像、音频等大文件存储在CDN上&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;无线web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WAP（wireless application protocol，无线应用协议）使用新的HTML标准，9600bps，协议层&lt;/li&gt;
&lt;li&gt;无线应用环境（WAE)&lt;/li&gt;
&lt;li&gt;无线会话协议（WSP）&lt;/li&gt;
&lt;li&gt;无线传输协议（WTP）：代替TCP，效率原因&lt;/li&gt;
&lt;li&gt;无线传输层安全（WTLS）&lt;/li&gt;
&lt;li&gt;无线数据包协议（WDP）：类似UDP&lt;/li&gt;
&lt;li&gt;承载层（GSM、CDMA、D-AMPS、GPRS等）&lt;/li&gt;
&lt;li&gt;I-Mode（information-mode，信息模式）&lt;/li&gt;
&lt;li&gt;对语音信号使用电路交换网络，对数据信号使用分组交换网络&lt;/li&gt;
&lt;li&gt;数字网络基于CDMA，手持机使用LTP（lightweight transport protocol，轻量级传输协议）并通过空中链路与协议转换网管通话&lt;/li&gt;
&lt;li&gt;软件结构&lt;/li&gt;
&lt;li&gt;用户交互模块&lt;/li&gt;
&lt;li&gt;插件+cHTML（compact HTML，紧凑的HTML）解释器+Java&lt;/li&gt;
&lt;li&gt;简单的窗口管理器&lt;/li&gt;
&lt;li&gt;网络通信&lt;/li&gt;
&lt;li&gt;实时操作系统&lt;/li&gt;
&lt;li&gt;第二代无线web&lt;/li&gt;
&lt;li&gt;新特新&lt;/li&gt;
&lt;li&gt;推模型和拉模型&lt;/li&gt;
&lt;li&gt;运行将电话集成到应用中&lt;/li&gt;
&lt;li&gt;多媒体信息&lt;/li&gt;
&lt;li&gt;264个象形文字&lt;/li&gt;
&lt;li&gt;存储设备接口&lt;/li&gt;
&lt;li&gt;浏览器插件&lt;/li&gt;
&lt;li&gt;wap2.0支持两种协议栈&lt;/li&gt;
&lt;li&gt;XHTML&lt;/li&gt;
&lt;li&gt;WSP HTTP&lt;/li&gt;
&lt;li&gt;WTP TLS&lt;/li&gt;
&lt;li&gt;WTLS TCP&lt;/li&gt;
&lt;li&gt;WDP IP&lt;/li&gt;
&lt;li&gt;承载层 承载层&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;多媒体&lt;/h2&gt;

&lt;h3&gt;音频压缩&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MP3（mpeg audio layer 3，MPEG音频层3）&lt;/li&gt;
&lt;li&gt;波形编码：使用较少的傅里叶分量重现波形&lt;/li&gt;
&lt;li&gt;感知编码：利用心理声学的频率屏蔽和暂时屏蔽去掉某些分量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;流式音频&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;元文件：将整个音频分为很多元文件，减少缓冲时间&lt;/li&gt;
&lt;li&gt;RTSP（real time streaming protocol，实时流协议）：管理用户界面、处理传输错误、解压缩音乐、消除抖动&lt;/li&gt;
&lt;li&gt;拉式服务器、推式服务器、低水印标记和高水印标记&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;IP 语音&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;H.323：ITU在1996年发布，终端、网守、区域。、H.245（新的压缩算法）、H.225（与网守通信）&lt;/li&gt;
&lt;li&gt;SIP（session initiation protocol，会话发起协议）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;视频简介&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一帧：一次扫描&lt;/li&gt;
&lt;li&gt;隔行扫描与逐行扫描&lt;/li&gt;
&lt;li&gt;彩色电视系统：SECAM（SEquentiel couleur avec memire，顺序与存储彩色电视系统）、PAL（phase alternating line，逐行倒相制式）、NTSC（national television standards committee，国家电视标准委员会）；亮度、色度&lt;/li&gt;
&lt;li&gt;HDTV（high definition television，高清晰度电视）&lt;/li&gt;
&lt;li&gt;数字系统&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;视频压缩&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JPEG（joint photographic experts group，联合图像专家族）标准&lt;/li&gt;
&lt;li&gt;块准备：四像素取平均值（亮度比色度更敏感）&lt;/li&gt;
&lt;li&gt;对每一块作DCT（discrete cosine transformation，离散余弦变换）&lt;/li&gt;
&lt;li&gt;量化：将上一步的每个格点乘以对应的权值&lt;/li&gt;
&lt;li&gt;减小每一块的(0,0)元素值（DC分量），其他元素称为AC分量&lt;/li&gt;
&lt;li&gt;行程编码：同样的值用计数值表示&lt;/li&gt;
&lt;li&gt;MPEG（motion picture experts group，运动图像专家组）标准，MPEG-1与JPEG的区别在于运动补偿，包括四种帧&lt;/li&gt;
&lt;li&gt;I（帧内编码，intracoded）：JPEG编码的静止图片&lt;/li&gt;
&lt;li&gt;P（预测，predictive）：与前一帧之间的逐块差值&lt;/li&gt;
&lt;li&gt;B（双向，bidirectional）：与前一帧和后一帧之间的差值&lt;/li&gt;
&lt;li&gt;D（DC编码，DC-coded）：用于快进的快平均值&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;视频点播&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;准视频点播：在多个频道以某种时差播放同样的视频&lt;/li&gt;
&lt;li&gt;线路：视频服务器-&amp;gt;光纤-&amp;gt;ATM或SONET骨干网络-&amp;gt;光纤-&amp;gt;交换机-&amp;gt;区域分布式网络-&amp;gt;消费者房子-&amp;gt;机顶盒&lt;/li&gt;
&lt;li&gt;视频服务器&lt;/li&gt;
&lt;li&gt;Zipf定律：最受欢迎的那部电影，它的受欢迎程度是第七受欢迎电影的7倍&lt;/li&gt;
&lt;li&gt;分层存储：RAM-&amp;gt;磁盘-&amp;gt;DVD-&amp;gt;磁带&lt;/li&gt;
&lt;li&gt;磁盘存储&lt;/li&gt;
&lt;li&gt;磁盘场（disk farm）：每个驱动器存储一定数量的电影，有重复&lt;/li&gt;
&lt;li&gt;磁盘阵列（disk array）或RAID（redundant array of inexpensive disks，廉价磁盘冗余阵列）：每部电影分布在多个驱动器上（条状化，striping）&lt;/li&gt;
&lt;li&gt;分发网络：数据源与目标之间交换机和线路的集合&lt;/li&gt;
&lt;li&gt;ADSL&lt;/li&gt;
&lt;li&gt;FTTC（fiber to the curb，光纤到路边）&lt;/li&gt;
&lt;li&gt;FTTH（fiber to the home，光纤到户）&lt;/li&gt;
&lt;li&gt;HFC（hybrid fiber coax，混合光纤同轴电缆）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Mbone（multicast backbone，多播骨干网）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Mbone是internet之上的一个虚拟层叠网络&lt;/li&gt;
&lt;li&gt;由隧道连接的多个多播岛组成，每个岛有至少一个mrouter（multicast router，多播路由器）&lt;/li&gt;
&lt;li&gt;使用基于Bellman-Ford距离矢量算法的路由算法DVMRP（distance vector multicast routing protocol，距离矢量多播路由协议）&lt;/li&gt;
&lt;li&gt;PIM（protocol independent multicast，协议无关多播）：AS间的路由，IETF工作组开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;网络安全&lt;/h1&gt;

&lt;h2&gt;密码学简介&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;加密：明文经密钥为参数的函数变换，输出密文&lt;/li&gt;
&lt;li&gt;密码编码学、密码分析学、密码术&lt;/li&gt;
&lt;li&gt;Kerckhoff原则：所有算法必须是公开的，只有密钥是保密的&lt;/li&gt;
&lt;li&gt;含糊的安全性（security by obscurity）：使算法保持秘密&lt;/li&gt;
&lt;li&gt;工作因子：密码分析者面对的密钥的复杂性，对于穷举搜索，为密钥长度的指数量级&lt;/li&gt;
&lt;li&gt;密码分析问题&lt;/li&gt;
&lt;li&gt;只有密文&lt;/li&gt;
&lt;li&gt;已知明文（有了一些相匹配的密文和明文）&lt;/li&gt;
&lt;li&gt;选择明文（能够加密一些自己选择的明文）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;置换密码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;保留明文字符顺序，进行明文伪装&lt;/li&gt;
&lt;li&gt;凯撒密码（单字母表置换）&lt;/li&gt;
&lt;li&gt;字符频率猜测&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;转置密码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;重新排序，不伪装明文&lt;/li&gt;
&lt;li&gt;字符频率不变&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;一次一密&lt;/h3&gt;

&lt;p&gt;优点，不可能被破解；缺点，密钥数量限制、密钥流失、丢失字符。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;量子密码系统：BB84协议&lt;/li&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;直线基：垂直和水平滤波器&lt;/li&gt;
&lt;li&gt;对角基：上述基旋转45度&lt;/li&gt;
&lt;li&gt;0与1：每一组基任意分配两个偏振方向为0和1&lt;/li&gt;
&lt;li&gt;过程&lt;/li&gt;
&lt;li&gt;A与B通信，T在监听&lt;/li&gt;
&lt;li&gt;A传送一次性密钥（长度略超过期望长度的2倍）给B，每一位随机选择一个基。&lt;/li&gt;
&lt;li&gt;B使用随机的基接收每一位；&lt;/li&gt;
&lt;li&gt;B告诉A自己使用的基。&lt;/li&gt;
&lt;li&gt;A告诉B哪些是正确的；&lt;/li&gt;
&lt;li&gt;A与B使用正确传输的位序作为密钥；&lt;/li&gt;
&lt;li&gt;反监听&lt;/li&gt;
&lt;li&gt;监听者的密钥不完整。监听者T，对于B基序列中能正确接收的部分，若T与B恰好使用相同的基，则T可以知道该位的密钥；否则T将丢失该位。可经过秘密放大进一步减少T知道的内容。&lt;/li&gt;
&lt;li&gt;监听检测。T必须将A的内容转发给B，却不能正确告知B的哪些基是正确的；一位密钥错误相当与B眼中的一位传输错误；A与B使用前向纠错码进行纠错，发现错误率大大超过设备的期望；得知T的存在。&lt;/li&gt;
&lt;li&gt;本质&lt;/li&gt;
&lt;li&gt;光子遇到与自己偏振方向成45度的滤波器，会随机跳到其中一个且概率相等。&lt;/li&gt;
&lt;li&gt;光子不可复制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;基本的密码学原则&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;消息必须包含一定的冗余度：区分有效消息、检测信道&lt;/li&gt;
&lt;li&gt;需要采取某种方法对抗重放攻击：新鲜度、时间戳&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;对称密钥算法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;块密码：接受一个n位的明文块作为输入，利用密钥把它变换成n为的密文块&lt;/li&gt;
&lt;li&gt;P盒：转置操作，混淆&lt;/li&gt;
&lt;li&gt;S盒：置换操作，扩散&lt;/li&gt;
&lt;li&gt;乘积密码：一系列的S盒和P盒叠加起来&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;DES（data encryption standard，数据加密标准）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;明文按64位数据块的单元加密，生成64位密文，接受56位密钥，共19个步骤，16次迭代&lt;/li&gt;
&lt;li&gt;三重DES：EDE（K1, K2, K1）模式，兼容了DES算法（只需让K1=K2）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;AES（advanced encryption standard，高级加密标准）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NIST（national institute of standards and technology，美国标准和技术委员会）在1997年1月发起了密码学竞赛，新标准称为AES，要求&lt;/li&gt;
&lt;li&gt;必须是对称的快密码算法&lt;/li&gt;
&lt;li&gt;公开所有设计&lt;/li&gt;
&lt;li&gt;支持128位、192和256位密钥长度&lt;/li&gt;
&lt;li&gt;软件、硬件实现都是可能的&lt;/li&gt;
&lt;li&gt;算法必须是公有的&lt;/li&gt;
&lt;li&gt;Rijndael：与DES相同，仍使用置换和转置，多轮策略（轮数取决于密钥和块长度）；另外，所有操作都涉及整个字节&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;密码算法的使用模式&lt;/h3&gt;

&lt;p&gt;AES和DES本质上都是置换和转置操作，同样的明文会得到同样的密文&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ECB模式（electronic code book mode，电子代码薄模式）：分割明文，逐块加密。容易被替换某一块。&lt;/li&gt;
&lt;li&gt;密码块链接模式：第一个块与随机IV（initialization vector，初始向量）异或，之后的明文块与前一密文块异或后加密，IV一起传输&lt;/li&gt;
&lt;li&gt;密码反馈模式：逐字节加密，不必等64位数据块；密文只有一位偶然翻转，会波及到坏字节在寄存器中时的8个字节&lt;/li&gt;
&lt;li&gt;流密码模式&lt;/li&gt;
&lt;li&gt;过程：用一个密钥加密一个初始向量生成一个输出块，同样的密钥加密这个输出块产生第二个输出块，以此类推；然后将明文与该密钥流异或得到密文&lt;/li&gt;
&lt;li&gt;优点：密钥流仅仅依赖于IV和密钥，不会受到传输错误的影响。&lt;/li&gt;
&lt;li&gt;缺点：重复使用（密钥，IV）对，会产生同样的密钥流，会导致密文受到密钥流重用攻击（keystream resuse attack）&lt;/li&gt;
&lt;li&gt;计数器模式：除密码薄模式以外的模式中，要想随机访问密文是不可能的&lt;/li&gt;
&lt;li&gt;过程：初始向量加常数后进行加密，再与明文异或；每个新的数据块使初始向量递增1&lt;/li&gt;
&lt;li&gt;优点：文件中任何地方的块都可以直接解密&lt;/li&gt;
&lt;li&gt;缺点：重复使用（密钥，IV）对，会导致密文受到密钥流重用攻击&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;密码分析&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;差分密码分析（differential cryptanalysis）：观察少量位差异的明文产生的密文，有些位模式可能比其他位模式更容易出现，这种现象可以导致概率攻击。可用于攻击任何一种块密码算法。&lt;/li&gt;
&lt;li&gt;线性密码分析（linear cryptanalysis）：将明文与密文特定位异或，应该一半为0一半为1，而加密过程会引入偏差，这样的偏差总可以降低工作量。只需2^43个已知密文就可以破解DES。&lt;/li&gt;
&lt;li&gt;电子功率消耗分析：计算机高电压表示1，低电压表示0，减慢时钟，记录CPU功率&lt;/li&gt;
&lt;li&gt;时间分析：if语句的then和else执行时间不同时，减慢时钟可以推断出轮密钥。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;公开密钥算法&lt;/h2&gt;

&lt;p&gt;加密算法E与解密算法D满足：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;D(E(P)) = P&lt;/li&gt;
&lt;li&gt;从E推断出D极其困难&lt;/li&gt;
&lt;li&gt;用选择明文攻击不可能破解E&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;RSA&lt;/h3&gt;

&lt;p&gt;RSA算法建立在分解大素数的基础上，RSA分别为三位发现者名字的首字母&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;计算参数&lt;/li&gt;
&lt;li&gt;选择两个大素数p、q（典型情况为1024位）&lt;/li&gt;
&lt;li&gt;计算n=p*q和z=(p-1)*(q-1)&lt;/li&gt;
&lt;li&gt;选择一个与z互素的数d&lt;/li&gt;
&lt;li&gt;找到e使其满足e*d=1%z&lt;/li&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;公钥对为(e, n)&lt;/li&gt;
&lt;li&gt;将明文分块，每个明文P落在0&amp;lt;=P&amp;lt;n中&lt;/li&gt;
&lt;li&gt;计算C=P^e(mod n)&lt;/li&gt;
&lt;li&gt;解密&lt;/li&gt;
&lt;li&gt;私钥对为(d, n)&lt;/li&gt;
&lt;li&gt;计算P=C^d(mod n)&lt;/li&gt;
&lt;li&gt;使用：所有人公开自己的加密密钥E，B给A发送Ea(P)，A获得后进行解密P=DaEa(P)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;其他的公开密钥算法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;主要有两方面的算法&lt;/li&gt;
&lt;li&gt;分解大数的困难度&lt;/li&gt;
&lt;li&gt;以大素数为模来计算离散对数的困难度&lt;/li&gt;
&lt;li&gt;背包算法：“根据给定的总重量找出可能的物品明细列表”被认为是计算上不可行的。该算法与其加强算法相继被S和R破解。&lt;/li&gt;
&lt;li&gt;其他：计算离散对数的困难度、基于圆锥曲线&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;数字签名&lt;/h2&gt;

&lt;p&gt;数字签名应满足条件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接收方可以验证发送方所宣称的身份&lt;/li&gt;
&lt;li&gt;发送方以后不能否认该消息的内容&lt;/li&gt;
&lt;li&gt;接收方不可能编造这样的消息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;对称密钥签名&lt;/h3&gt;

&lt;p&gt;选择一个中心权威机构BB，每个用户选择一个秘密密钥亲手交给BB。A发送A, Ka(B, Ra, t, P)给BB，BB将Kb(A, Ra, t, P, K_BB(A, t, P))给B&lt;/p&gt;

&lt;h3&gt;公开密钥数字签名&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;假设公开密钥算法不仅满足D(E(P))=P，还满足E(D(P))=P&lt;/li&gt;
&lt;li&gt;A向B发送 C=Eb(Da(P))&lt;/li&gt;
&lt;li&gt;B得到明文 P=Ea(Db(C))&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;消息摘要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;特性

&lt;ul&gt;
&lt;li&gt;给定P，很容易计算MD(P)&lt;/li&gt;
&lt;li&gt;给定MD(P)，想得到P是不可能的&lt;/li&gt;
&lt;li&gt;给定P的情况下，没有人能得到满足 MD(P&amp;#39;)=MD(P) 的P&amp;#39;&lt;/li&gt;
&lt;li&gt;输入明文即使只有1位变化，也会导致不同输出&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;加密摘要比明文快的多，可以加速数字签名算法&lt;/li&gt;
&lt;li&gt;MD5

&lt;ul&gt;
&lt;li&gt;将明文填补到448位&lt;/li&gt;
&lt;li&gt;消息后追加其消息长度（64位整数），此时共512位&lt;/li&gt;
&lt;li&gt;取出一个512字节的输入块，通过正弦函数与128位的缓冲区混合，每个输入块执行4轮&lt;/li&gt;
&lt;li&gt;128位的缓冲区即为最终的消息摘要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SHA-1（secure hash algorithm 1）：同样按照512字节块处理数据，唯一不同的是生成160位的消息摘要

&lt;ul&gt;
&lt;li&gt;利用SHA-1和RSA对非保密的消息进行签名：Alice-&amp;gt;明文P-&amp;gt;SHA-1-&amp;gt;P的散列值H-&amp;gt;RSA(私钥Da)-&amp;gt;签过名的散列值Da(H)-&amp;gt;Bob&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;生日攻击&lt;/h3&gt;

&lt;p&gt;n个输入和k个可能的输出之间存在某种映射关系，公有n(n-1)/2个可能的输入对，若n(n-1)/2&amp;gt;k，则至少有一个匹配的机会是非常大的&lt;/p&gt;

&lt;h2&gt;公钥的管理&lt;/h2&gt;

&lt;h3&gt;证书&lt;/h3&gt;

&lt;p&gt;CA（certification authority，证书权威机构），避免了24小时在线的密钥分发中心&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;生成证书&lt;/li&gt;
&lt;li&gt;Alice到CA，出示其公钥和身份，请求证明他的公钥&lt;/li&gt;
&lt;li&gt;CA给Alice一个证书，其中包括Alice的身份、CA的私钥对身份散列值的签名&lt;/li&gt;
&lt;li&gt;证书验证&lt;/li&gt;
&lt;li&gt;Bob计算Alice身份的散列值，与CA的公钥应用在Alice证书的签名上得到的散列值进行比对，因Trudy无法得知CA的私钥，所以他不能对散列值正确地签名&lt;/li&gt;
&lt;li&gt;证书格式标准 X.509：ITU1988年通过，采用OSI ASN.1（abstract syntax notation 1，抽象语法标记1）编码&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;PKI（public key infrastructure，公开密钥基础设施）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;信任链（证书路径）：分层的CA，顶级CA负责证明次级CA（又称RA，regional authority，区域权威机构），次级CA负责证明第三级CA，以此类推&lt;/li&gt;
&lt;li&gt;信任锚：浏览器预先安装100多个根的公钥&lt;/li&gt;
&lt;li&gt;目录（在哪里存放证书）：用户自己存放、DNS服务器存放&lt;/li&gt;
&lt;li&gt;撤销：CA定期发布CRL（certificate revocation list，证书撤销列表）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;通信安全&lt;/h2&gt;

&lt;h3&gt;IPSec&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RFC 2401、2402和2406，总是要求加密功能，但允许空算法&lt;/li&gt;
&lt;li&gt;IPSec是一个多服务、多算法和多粒度的框架&lt;/li&gt;
&lt;li&gt;两种模式&lt;/li&gt;
&lt;li&gt;传输模式：直接插在IP头的后面&lt;/li&gt;
&lt;li&gt;隧道模式：整个IP分组封装到一个新的新的IP分组中，新分组具有全新的IP头&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;防火墙&lt;/h3&gt;

&lt;p&gt;防火墙包括两部分&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分组过滤器（网络层）：配置了某些额外功能的标准路由器，负责检查进入和出去的所有分组&lt;/li&gt;
&lt;li&gt;应用网关（应用层）：根据头、消息长度，甚至内容决定转发或丢弃&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DoS（denial of service）攻击：向目标机器发送大量合法的分组，防火墙不能处理；DDoS（distributed denial of service）攻击：大量普通用户的机器被控制而进行DoS攻击&lt;/p&gt;

&lt;h3&gt;VPN（virtual private network，虚拟私有网络）&lt;/h3&gt;

&lt;p&gt;建立在公共网络上的层叠网络，可利用IPSec实现隧道，将任意两个办公室的流量聚集到一个支持认证和加密功能的SA上&lt;/p&gt;

&lt;h3&gt;无线网络安全&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;802.11安全性：WEP（wired equivalent privacy，相当于有线网络的保密性）为数据链路层安全协议，使用基于RC4的流密码算法&lt;/li&gt;
&lt;li&gt;蓝牙安全性：物理层的调频机制提供了一定程度的安全性；设备预先建立好的共享的秘密密钥（passkey，总密钥）；蓝牙的加密算法使用叫做E0的流密码，完整性控制使用SAFER+，两者都是对称密钥快密码算法&lt;/li&gt;
&lt;li&gt;WAP2.0安全性：它是基于IP的，可以使用IPSec；传输层可以使用TLS提供保护。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;认证协议&lt;/h2&gt;

&lt;h3&gt;基于共享秘密密钥的认证&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;质询-回应协议：容易受到反射攻击&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;建立一个共享密钥：Diffie-Hellman密钥交换协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基于大素数分解的困难度，容易受到水桶队列攻击（又称中间人攻击）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;使用密钥分发中心的认证协议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;重放攻击&lt;/li&gt;
&lt;li&gt;Needham-Schroeder认证协议&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;使用Kerberos的认证协议&lt;/h3&gt;

&lt;p&gt;应用在许多实际系统中，如windows2000&lt;/p&gt;

&lt;h3&gt;使用公开密钥密码学的认证协议&lt;/h3&gt;

&lt;h2&gt;电子邮件安全&lt;/h2&gt;

&lt;h3&gt;PGP（pretty good privacy，相当好的隐私）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PGP使用一个称为IDEA（international data encryption algorithm）的块密码算法来加密数据&lt;/li&gt;
&lt;li&gt;私钥环：一个或多个本人的公-私钥对&lt;/li&gt;
&lt;li&gt;公钥环：与当前用户进行通信的其他用户的公钥&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;PEM（privacy enhanced mail，增强隐私的邮件）&lt;/h3&gt;

&lt;p&gt;像PGP一样，每条消息都使用一次性密钥进行加密，密钥（被RSA或三重DES保护）也被包装到消息中&lt;/p&gt;

&lt;h3&gt;S/MIME（Secure/MIME，安全的MIME）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IETF提出&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Web 安全&lt;/h2&gt;

&lt;h3&gt;安全的命名机制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;DNS欺骗&lt;/li&gt;
&lt;li&gt;安全的DNS&lt;/li&gt;
&lt;li&gt;自证明的名字&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;SSL（secure sockets layer，安全套接字层）&lt;/h3&gt;

&lt;p&gt;在两个套接字之间建立安全的连接，位于应用层与传输层之间&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户与服务器之间的参数协商&lt;/li&gt;
&lt;li&gt;客户与服务器的双向认证&lt;/li&gt;
&lt;li&gt;保密的通信&lt;/li&gt;
&lt;li&gt;数据完整性保护&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;移动代码安全&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;java applet安全：解释器将其封装到沙箱一边限制它的行为&lt;/li&gt;
&lt;li&gt;Active控件：代码签名，认证码&lt;/li&gt;
&lt;li&gt;javascript：没有正式的安全模型&lt;/li&gt;
&lt;li&gt;病毒：具有繁殖能力，不断复制自己&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;社会问题&lt;/h2&gt;

&lt;h3&gt;隐私&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;clipper chip（剪切芯片）&lt;/li&gt;
&lt;li&gt;key escrow（密钥托管）&lt;/li&gt;
&lt;li&gt;电子边境基金会（electronic frontier foundation）&lt;/li&gt;
&lt;li&gt;匿名邮件中继器（anonymous remailer）&lt;/li&gt;
&lt;li&gt;翻译型的邮件中继器（cypherpunk remailer）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;言论自由&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;信息隐藏学（steganography）&lt;/li&gt;
&lt;li&gt;数字水印&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;　版权&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;版权（copyright）是对IP（intellectual property，知识产权）的创造者的一种授权&lt;/li&gt;
&lt;li&gt;合理使用原则（fair use doctrine）&lt;/li&gt;
&lt;li&gt;TCPA（trusted computing platform alliance，可信计算平台联盟）&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 28 Oct 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/%E7%AC%94%E8%AE%B0/computer-network.html</link>
				<guid isPermaLink="true">http://harttle.github.io/%E7%AC%94%E8%AE%B0/computer-network.html</guid>
			</item>
		
			<item>
				<title>Linux下的触摸板设置</title>
				<description>&lt;h1&gt;软件安装&lt;/h1&gt;

&lt;h2&gt;安装 Synaptics 驱动&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# arch linux:&lt;/span&gt;
pacman -S xf86-input-synaptics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;管理工具&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 命令行管理工具：Synclient &lt;/span&gt;
pacman -S xf86-input-synaptics    

&lt;span class=&quot;c&quot;&gt;# 图形管理工具：GPointing Device Settings&lt;/span&gt;
yaourt -S gpointing-device-settings

&lt;span class=&quot;c&quot;&gt;# KDE 触摸板控制模块&lt;/span&gt;
yaourt -S kcm_touchpad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;环境配置&lt;/h1&gt;

&lt;p&gt;一般的设置工作可通过图形管理工具完成，如单击、双击、右键的识别，横向和纵向滚动、双指滚动。下面介绍一些高级配置。&lt;/p&gt;

&lt;h2&gt;基本触摸板配置&lt;/h2&gt;

&lt;p&gt;可通过修改 synaptics 的配置文件，修改触摸板配置。包括多指敲击、滚动、避免手掌触摸、精确度与快速滚动。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#file: /etc/X11/xorg.conf.d/50-synaptics.conf&lt;/span&gt;
Section &lt;span class=&quot;s2&quot;&gt;&amp;quot;InputClass&amp;quot;&lt;/span&gt;
        Identifier &lt;span class=&quot;s2&quot;&gt;&amp;quot;touchpad catchall&amp;quot;&lt;/span&gt;
        Driver &lt;span class=&quot;s2&quot;&gt;&amp;quot;synaptics&amp;quot;&lt;/span&gt;
        MatchIsTouchpad &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;

        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;TapButton1&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#单指敲击产生左键事件&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;TapButton2&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#双指敲击产生中键事件&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;TapButton3&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#三指敲击产生右键事件&lt;/span&gt;

        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;VertEdgeScroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#滚动操作：横向、纵向、环形&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;VertTwoFingerScroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;HorizEdgeScroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;HorizTwoFingerScroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;CircularScrolling&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;  
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;CircScrollTrigger&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;EmulateTwoFingerMinZ&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#精确度&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;EmulateTwoFingerMinW&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;CoastingSpeed&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;#触发快速滚动的滚动速度&lt;/span&gt;

        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;PalmDetect&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#避免手掌触发触摸板&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;PalmMinWidth&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;#认定为手掌的最小宽度&lt;/span&gt;
        Option &lt;span class=&quot;s2&quot;&gt;&amp;quot;PalmMinZ&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#认定为手掌的最小压力值&lt;/span&gt;
EndSection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;code&gt;man synaptics&lt;/code&gt; 了解更多信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：同时安装 &lt;code&gt;kcm_synaptics&lt;/code&gt; 会覆盖掉该配置信息。&lt;/p&gt;

&lt;h2&gt;输入时禁止触摸板敲击&lt;/h2&gt;

&lt;p&gt;这样可以避免焦点变化，影响当前的输入。&lt;/p&gt;

&lt;p&gt;对于使用 &lt;code&gt;startx&lt;/code&gt; 来启动的桌面系统，可以修改其 &lt;code&gt;.xinitrc&lt;/code&gt; 初始化配置文件来完成：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;syndaemon -t -k -i 2 -d &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的 &lt;code&gt;-i 2&lt;/code&gt; 表示两秒空闲，即键盘事件后的两秒内不允许响应触摸板 Tap。更多信息请参照手册页：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;man syndaemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;外接鼠标时禁用触摸板&lt;/h2&gt;

&lt;p&gt;在 arch linux 中，使用 udev 监测硬件的热拔插，通过修改其规则文件，来响应外接鼠标事件，从而禁用和启用触摸板。如下的规则文件，调用了 synclient。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#file: /etc/udev/rules.d/01-touchpad.rules&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;KERNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse[0-9]&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;DISPLAY&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:0.0&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;XAUTHORITY&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/harttle/.Xauthority&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ID_CLASS&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse&amp;quot;&lt;/span&gt;, RUN+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/synclient TouchpadOff=1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;KERNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse[0-9]&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;DISPLAY&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;:0.0&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;XAUTHORITY&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/harttle/.Xauthority&amp;quot;&lt;/span&gt;, ENV&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ID_CLASS&lt;span class=&quot;o&quot;&gt;}=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse&amp;quot;&lt;/span&gt;, RUN+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/synclient TouchpadOff=0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该文件中每个操作必须单独一行，可以使用 &lt;code&gt;\&lt;/code&gt; 来折行；&lt;code&gt;SUBSYSTEM&lt;/code&gt; 与 &lt;code&gt;KERNEL&lt;/code&gt; 指定了设备 &lt;code&gt;/dev/input/mouse[0-9]&lt;/code&gt;（archwiki的中文页面中此处有误，我会找时间去修改）。了解更多 udev rules 语法：&lt;a href=&quot;https://wiki.archlinux.org/index.php/Udev&quot;&gt;https://wiki.archlinux.org/index.php/Udev&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;开机时鼠标检测&lt;/h3&gt;

&lt;p&gt;PS/2 鼠标在开机时不会出发 udev 规则。我们做一个桌面环境的启动脚本，在 .xinitrc，profile 中调用，或者放在  KDE 的 Autostart 中：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ls /dev/input/by-id | grep -E &lt;span class=&quot;s1&quot;&gt;&amp;#39;.*-mouse&amp;#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ids&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; synclient &lt;span class=&quot;nv&quot;&gt;TouchpadOff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;触摸板识别错误&lt;/h2&gt;

&lt;p&gt;对于某些型号的机器，Arch 下触摸板识别会有问题（内核bug），官方建议从 AUR 安装 &lt;code&gt;psmouse-alps-driver&lt;/code&gt;。
受影响的机器有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acer Aspire 7750G&lt;/li&gt;
&lt;li&gt;Dell Latitude E6230, E6520, E6430 and E6530 (ALPS DualPoint TouchPad), Inspiron N5110 (ALPS GlidePoint),  Inspiron 14R Turbo SE7420/SE7520 (ALPS GlidePoint)&lt;/li&gt;
&lt;li&gt;Samsung NC110/NF210/QX310/QX410/QX510/SF310/SF410/SF510/RF410/RF510/RF710/RV515&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果问题还没有解决，可以手动编译该模块载入内核。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;卸载原有 Alps 触摸板驱动&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;pacman -R psmouse-alps-driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从这里下载：&lt;a href=&quot;http://www.dahetral.com/public-download&quot;&gt;http://www.dahetral.com/public-download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压缩，并拷贝至 &lt;code&gt;/usr/src&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;tar -xvf alps-xxx.tar
sudo cp -r usr /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入编译树，并进行编译&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo dkms add psmouse/alps-xxx
sudo dkms autoinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卸载原有模块并载入新的内核模块&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo rmmod psmouse &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; sudo modprobe psmouse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 27 Oct 2013 00:00:00 +0800</pubDate>
				<link>http://harttle.github.io/linux/synaptics-settings-linux.html</link>
				<guid isPermaLink="true">http://harttle.github.io/linux/synaptics-settings-linux.html</guid>
			</item>
		
	</channel>
</rss>
